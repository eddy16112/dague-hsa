extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>

extern PLASMA_desc descA;
extern PLASMA_desc descT;
extern double *work, *tau;
int PLASMA_INFO;

#define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])
#define T(m,n) &(((double*)descT.mat)[descT.bsiz*(m)+descT.bsiz*descT.lmt*(n)])

/* Define it to shortcut the lookup for the local variables. */
#define DPLASMA_HOOK_OPTIMIZED

#if 0
#define OUTPUT(ARG)  printf ARG
#else
#define OUTPUT(ARG)
#endif
%}

GRIDrows = 1
GRIDcols = 1
NB
SIZE
colRANK = 0
rowRANK = 0

/*****************************************
 9:11
*/
DGEQRT(k)

  // Execution space
  k = 0..SIZE-1

  // Parallel partitioning
  : k % GRIDrows == rowRANK
  : k % GRIDcols == colRANK

  IN RV1 <- (k==0) ? IN(k,k) : C2 DSSMQR(k-1,k,k)

  OUT RV1 -> (k==SIZE-1) ? OUT(k,k) : R DTSQRT(k,k+1)
  OUT T   -> T DORMQR(k, k+1..SIZE-1)

BODY
#ifdef DPLASMA_EXECUTE
                CORE_dgeqrt(
                    k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
                    k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
                    descT.mb,
                    A(k, k), descA.nb,
                    T(k, k), descT.mb,
                    tau, work);
#else
    OUTPUT(( "CORE_dgeqrt"));
#endif  /* DPLASMA_EXECUTE */
END

/*****************************************
 17:21
*/
DTSQRT(k,m)

  // Execution space
  k = 0..SIZE-2
  m = k+1..SIZE-1

  // Parallel partitioning
  : m % GRIDrows == rowRANK
  : k % GRIDcols == colRANK

  IN V2 <- (k==0) ? IN(m,k) : C2 DSSMQR(k-1,k,m)
  IN R  <- (m==k+1) ? RV1 DGEQRT(k) : R DTSQRT(k,m-1)

  OUT R  -> (m==SIZE-1) ?  V1 DORMQR(k,k+1..SIZE-1) : R DTSQRT(k,m+1)
  OUT V2 -> V2 DSSMQR(k,k+1..SIZE-1,m)
  OUT T  -> T DSSMQR(k,k+1..SIZE-1,m)

BODY
#ifdef DPLASMA_EXECUTE
           CORE_dtsqrt(
                    m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
                    k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
                    descT.mb,
                    A(k, k), descA.nb,
                    A(m, k), descA.nb,
                    T(m, k), descT.mb,
                    tau, work);
#else
    OUTPUT(( "CORE_dtsqrt"));
#endif  /* DPLASMA_EXECUTE */
END

/*****************************************
 28:31
*/
DORMQR(k,n)

  // Execution space
  k = 0..SIZE-2
  n = k+1..SIZE-1

  // Parallel partitioning
  : k % GRIDrows == rowRANK
  : k % GRIDcols == colRANK


  IN C1 <- (k==0) ? IN(k,n) : C2 DSSMQR(k-1,n,k)
  IN T  <-  T DGEQRT(k)
  IN V1 <- R DTSQRT(k, SIZE-1)

  OUT C1 -> C1 DSSMQR(k,n,k+1)

BODY
#ifdef DPLASMA_EXECUTE
               CORE_dormqr(
                    PlasmaLeft, PlasmaTrans,
                    k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
                    n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
                    descT.mb,
                    k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
                    A(k, k), descA.nb,
                    T(k, k), descT.mb,
                    A(k, n), descA.nb,
                    work, descT.nb);
#else
    OUTPUT(( "CORE_dormqr"));
#endif  /* DPLASMA_EXECUTE */ 
END

/*****************************************
 37:41
*/
DSSMQR(k,n,m)

  // Execution space
  k = 0..SIZE-2
  n = k+1..SIZE-1
  m = k+1..SIZE-1

  // Parallel partitioning
  : m % GRIDrows == rowRANK
  : k % GRIDcols == colRANK


  IN C2 <- (k==0) ? IN(m,n) : C2 DSSMQR(k-1,n,m)
  IN V2 <- V2 DTSQRT(k,m)
  IN T  <- T DTSQRT(k,m)
  IN C1 <- (m==k+1) ? C1 DORMQR(k,n) : C1 DSSMQR(k,n,m-1)

  OUT C2 -> ((m==k+1) & (n==k+1)) ? RV1 DGEQRT(k+1) : OUT(1,1)
  OUT C2 -> ((m==k+1) & (n!=k+1))  ? C1 DORMQR(k+1,n) : OUT(1,1)
  OUT C2 -> ((m!=k+1) & (n==k+1)) ? V2 DTSQRT(k+1,m) : OUT(1,1)
  OUT C2 -> ((m!=k+1) & (n!=k+1))  ? C2 DSSMQR(k+1,n,m) : OUT(1,1)

  OUT C1 -> (m==SIZE-1) ? OUT(k,n) : C1 DSSMQR(k,n,m+1)

BODY
#ifdef DPLASMA_EXECUTE
                CORE_dssmqr(
                    PlasmaLeft, PlasmaTrans,
                    descA.nb,
                    m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
                    n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
                    descT.mb,
                    descA.nb,
                    A(k, n), descA.nb,
                    A(m, n), descA.nb,
                    A(m, k), descA.nb,
                    T(m, k), descT.mb,
                    work, descT.mb);
#else
    OUTPUT(( "CORE_dssmqr"));
#endif  /* DPLASMA_EXECUTE */ 
END

