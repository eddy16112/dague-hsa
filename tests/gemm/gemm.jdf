extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

extern PLASMA_desc descA, descB, descC;
extern int uplo;
int PLASMA_INFO;

#include "dplasma.h"
#include "remote_dep.h"

#ifdef DISTRIBUTED
#   include "data_management.h"
    extern DPLASMA_desc ddescA, ddescB, ddescC;
#   define A(m,n) dplasma_get_local_tile_s(&ddescA, m, n)
#   define B(m,n) dplasma_get_local_tile_s(&ddescB, m, n)
#   define C(m,n) dplasma_get_local_tile_s(&ddescC, m, n)
#else
#   define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])
#   define B(m,n) &(((double*)descB.mat)[descB.bsiz*(m)+descB.bsiz*descB.lmt*(n)])
#   define C(m,n) &(((double*)descC.mat)[descC.bsiz*(m)+descC.bsiz*descC.lmt*(n)])
#endif

#ifdef DPLASMA_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DPLASMA_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/*
 * Globals
 * GRIDrows, GRIDcols, NB, SIZE, stileSIZE
 */
GRIDrows = 1
GRIDcols = 1
NB = 120
SIZE
colRANK = 0
rowRANK = 0
stileSIZE = 1

/**************************************************
 *                     STARTUP                    *
 **************************************************/

STARTUP(useless)
useless = 0 .. 0

INOUT USELESS <- A(0,0)
              -> USELESS READVALS(0 .. SIZE-1, 0 .. SIZE-1)
BODY
  /* Nothing relevant */
END

READVALS(i,j)
i = 0 .. SIZE-1
j = 0 .. SIZE-1

IN USELESS <- USELESS STARTUP(0)
INOUT A <- A(i,j)
        -> A GEMM(i,j,0)
INOUT B <- B(i,j)
        -> B GEMM(i,j,0)
INOUT C <- C(i,j)
        -> C GEMM(i,j,0)
BODY
  /* Emptiness */
END


/**************************************************
 *                       GEMM                     *
 **************************************************/

GEMM(i,j,k)

// Execution space
i = 0 .. SIZE-1
j = 0 .. SIZE-1
k = 0 .. SIZE-1

// Parallel partitioning
: (i / stileSIZE) % GRIDrows == rowRANK
: (j / stileSIZE) % GRIDcols == colRANK

// Parameters
INOUT A <- (k == 0) ? A READVALS(i,j) : A GEMM( i, (j+SIZE-1) % SIZE, k-1 )
        -> (k == SIZE-1) ? A(i,j) : A GEMM( i, (j+1) % SIZE, k+1 )
INOUT B <- (k == 0) ? B READVALS(i,j) : B GEMM( (i+SIZE-1) % SIZE, j, k-1 )
        -> (k == SIZE-1) ? B(i,j) : B GEMM( (i+1) % SIZE, j, k+1 )
INOUT C <- (k == 0) ? C READVALS(i,j) : C GEMM( i, j, k-1 )
        -> (k == SIZE-1) ? C(i,j) : C GEMM( i, j, k+1 )
BODY
        CORE(
            dgemm, (
                PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(i, k)*/, NB, /*A.nb,*/
                      B /*B(k, j)*/, NB, /*A.nb,*/
                 1.0, C /*C(i, j)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
                "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, i, k, NB, /*A.nb,*/
                      k, j, NB, /*A.nb,*/
                 1.0, i, j, NB /*A.nb*/ )
            );
END
