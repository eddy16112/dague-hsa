extern "C" %{
#include "remote_dep.h"

extern char *DataIn;
#define DATA(n) DataIn

extern void do_down(void);
extern void do_up(void);
%}

// Constants
GRIDrows=1
rowRANK=0

// Globals
GRIDcols
colRANK
TASKDURATION
DEPTH

/**************************************************
 *                      DOWN                      *
 **************************************************/
DOWN(k, d)

// Execution Space
k = 0..DEPTH
d = 0..((1<<k)-1)

// Parallel partitionning
: d % GRIDrows == rowRANK
: d % GRIDcols == colRANK

INOUT T <- (k == 0 ) ? DATA(0)           : T DOWN(k-1, d/2)
        -> ((k == DEPTH) & ((d%2) == 0)) ? A UP(k-1, d/2)
	-> ((k == DEPTH) & ((d%2) == 1)) ? B UP(k-1, d/2)
	-> (k < DEPTH)                   ? T DOWN(k+1, 2*d..(2*d)+1)
BODY
	do_down();
END

/**************************************************
 *                       UP                       *
 **************************************************/
UP(k, d)

// Execution Space
k = 0..(DEPTH-1)
d = 0..((1<<k)-1)

// Parallel partitionning
: d % GRIDrows == rowRANK
: d % GRIDcols == colRANK

INOUT  A <- (k == (DEPTH-1)) ? T DOWN(k+1, 2*d) : A UP(k+1, 2*d)
         -> ((k > 0) & ((d%2)==0)) ? A UP(k-1, d/2)
         -> ((k > 0) & ((d%2)==1)) ? B UP(k-1, d/2)
IN     B <- (k == (DEPTH-1)) ? T DOWN(k+1, 2*d+1) : A UP(k+1, 2*d+1)

BODY
	do_up();
END
