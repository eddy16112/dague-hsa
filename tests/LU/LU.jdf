extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>

#if defined(USE_MPI)
#include <mpi.h>
#include "data_management.h"
extern MPI_Datatype LOWER_TILE, UPPER_TILE, PIVOT_VECT, LITTLE_L;
extern DPLASMA_desc ddescA;
extern DPLASMA_desc ddescL;
extern DPLASMA_desc ddescIPIV;

#define A(m,n) dplasma_get_local_tile_s(&ddescA, m, n)
#define L(m,n) dplasma_get_local_tile_s(&ddescL, m, n)
#define IPIV(m,n) dplasma_get_local_IPIV(&ddescIPIV, m, n)

#define descA ddescA
#define descL ddescL

#else
extern PLASMA_desc descA;
extern PLASMA_desc descL;

#define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])
#define L(m,n) &(((double*)descL.mat)[descL.bsiz*(m)+descL.bsiz*descL.lmt*(n)])
extern int* _IPIV;
#define IPIV(m,n) &_IPIV[descA.nb*(m)+descA.nb*descA.lmt*(n)]

#endif

int _PLASMA_INFO;

#define OUTPUT(ARGS) printf ARGS

typedef struct dplasma_memory_pool_t {
    dplasma_atomic_lifo_t lifo;
    struct plasma_context_t *plasma;
    size_t elem_size;
    int elem_type;
} dplasma_memory_pool_t;

extern dplasma_memory_pool_t *work_pool;
extern void* plasma_private_alloc(void*, size_t, int);

int dplasma_private_memory_init( dplasma_memory_pool_t* pool,
                                 size_t size,
                                 int type )
{
    dplasma_atomic_lifo_construct( &(pool->lifo) );
    pool->elem_size = size;
    pool->elem_type = type;
    pool->plasma = NULL;
    return 0;
}

void* dplasma_private_memory_pop(dplasma_memory_pool_t* pool)
{
    dplasma_list_item_t* elem = dplasma_atomic_lifo_pop(&(pool->lifo));
    if( NULL == elem ) {
        elem = (dplasma_list_item_t*)plasma_private_alloc(pool->plasma, pool->elem_size, pool->elem_type);
    }
    return elem;
}

void dplasma_private_memory_push(dplasma_memory_pool_t* pool, void* memory)
{
    dplasma_list_item_t* item = DPLASMA_LIST_ITEM_SINGLETON(memory);
    dplasma_atomic_lifo_push( &(pool->lifo), item );
}

int dgesv_private_memory_initialization(struct plasma_context_t *plasma)
{
    work_pool = (dplasma_memory_pool_t*)malloc(sizeof(dplasma_memory_pool_t));
    dplasma_private_memory_init( work_pool, descL.mb*descL.nb, descL.dtyp );
    work_pool->plasma = plasma;

    return 0;
}

int dgesv_private_memory_finalization(void)
{
    return 0;
}

#define MAXDBLSTRLEN 16

#if defined(DEBUG_MATRICES)
static void debug_warning(int core, const char *when, const char *function, int p1, int p2, int p3)
{
    int m, n, len, pos;
    double *a, *l;
    int *ipiv;
    char *line;
#if defined(USE_MPI)
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    int rank = 0;
#endif

    if( p2 != -1 ) {
        if( p3 != -1 ) {
            fprintf(stderr, "[%d/%d] %s call of %s(%d, %d, %d)\n", rank, core, when, function, p1, p2, p3);
        } else {
            fprintf(stderr, "[%d/%d] %s call of %s(%d, %d)\n", rank, core, when, function, p1, p2);
        }
    } else {
        fprintf(stderr, "[%d/%d] %s call of %s(%d)\n", rank, core, when, function, p1, p2);
    }
}

static void debug_matrix(int core, double *a, char *name, int tilem, int tilen)
{
    int m, n, len, pos;
    char *line;
#if defined(USE_MPI)
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    int rank = 0;
#endif

    len = 32 + (MAXDBLSTRLEN + 1) * descA.nb;
    line = (char *)malloc( len );

    fprintf(stderr, "[%d/%d] %s(%d, %d) = \n", rank, core, name, tilem, tilen);
    pos = 0;
    for(m = 0; m < descA.mb; m++) {
        for(n = 0; n < descA.nb; n++) {
            pos += snprintf(line + pos, len-pos, "%9.5f ", a[m + descA.mb * n]);
        }
        fprintf(stderr, "[%d/%d]   %s\n", rank, core, line);
        pos = 0;
    }
    free(line);
}

static void debug_l(int core, double* a, char* name, int tilen, int tilem)
{
    int m, n, len, pos;
    char *line;
#if defined(USE_MPI)
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    int rank = 0;
#endif

    len = 32 + (MAXDBLSTRLEN + 1) * descL.nb;
    line = (char *)malloc( len );

    fprintf(stderr, "[%d/%d] %s(%d, %d) = \n", rank, core, name, tilem, tilen);
    pos = 0;
    for(m = 0; m < descL.mb; m++) {
        for(n = 0; n < descL.nb; n++) {
            pos += snprintf(line + pos, len-pos, "%9.5f ", a[m + descL.mb * n]);
        }
        fprintf(stderr, "[%d/%d]   %s\n", rank, core, line);
        pos = 0;
    }
    free(line);
}



static void debug_ipiv(int core, int *a, char *name, int tilen, int tilem)
{
    int m, len, pos;
    char *line;
#if defined(USE_MPI)
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    int rank = 0;
#endif

    len = 32 + (MAXDBLSTRLEN + 1) * descA.nb;
    line = (char *)malloc( len );

    fprintf(stderr, "[%d/%d] %s(%d, %d) = \n", rank, core, name, tilem, tilen);
    pos = 0;
    for(m = 0; m < descA.mb; m++) {
        pos += snprintf(line + pos, len-pos, "%3d ", a[m]);
    }
    fprintf(stderr, "[%d/%d]   %s\n", rank, core, line);
    free(line);
}
#else
#define debug_ipiv(core, a, name, tilen, tilem)
#define debug_l(core, a, name, tilen, tilem)
#define debug_matrix(core, a, name, tilen, tilem)
#define debug_warning(core, when, function, p1, p2, p3)
#endif
%}

/** Globals */
NT
GRIDrows
GRIDcols
rowRANK
colRANK
rtileSIZE
ctileSIZE

/************************************************************************************
 *                                   DGETRF                                         *
 ************************************************************************************/

DGETRF_HACK(k)
 k = 0..NT-1

 // Parallel partitioning
 : (k / rtileSIZE) % GRIDrows == rowRANK
 : (k / ctileSIZE) % GRIDcols == colRANK

 INOUT LU <- LU DGETRF(k)
          -> (k != NT-1) ?                 L DGESSM(k, k+1..NT-1)  [LOWER_TILE]
	  -> A(k,k)                                                [LOWER_TILE]
BODY
 /* nothing */
END

DGETRF(k)
 k = 0..NT-1

 // Parallel partitioning
 : (k / rtileSIZE) % GRIDrows == rowRANK
 : (k / ctileSIZE) % GRIDcols == colRANK

 //This DSSSSM always run on the same node, so typing will have no effect.
 INOUT LU <- (k == 0)    ? A(0, 0)       : C2 DSSSSM(k-1, k, k)
          -> (k == NT-1) ? A(NT-1, NT-1) : U DTSTRF(k, k+1)        [UPPER_TILE]
          -> LU DGETRF_HACK(k)
 INOUT IPIV <- IPIV(k, k)                                          [PIVOT_VECT]
            -> IPIV DGESSM(k, k+1..NT-1)                           [PIVOT_VECT]
            -> IPIV(k, k)                                          [PIVOT_VECT]

BODY
#if !defined(DPLASMA_DRY_RUN)
                int iinfo = 0;
                debug_warning(context->eu_id, "before", "DGETRF", k, -1, -1);
                debug_matrix(context->eu_id, LU, "LU=A", k, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", k, k);
                CORE_dgetrf(
                    k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
                    k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
                    descL.mb,
                    LU /*A(k, k)*/, descA.nb,
                    IPIV /*IPIV(k, k)*/, &iinfo);
                debug_warning(context->eu_id, "after", "DGETRF", k, -1, -1);
                debug_matrix(context->eu_id, LU, "LU=A", k, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", k, k);
                if (_PLASMA_INFO == 0 && iinfo > 0 && k == descA.mt-1)
                    _PLASMA_INFO = iinfo + descA.nb*k;
#else
        OUTPUT(( "void task_DGETRF(double *A, int *IPIV)" ));
#endif  /* !defined(DPLASMA_DRY_RUN) */
END

/************************************************************************************
 *                                   DSSSSM                                         *
 ************************************************************************************/

DSSSSM_OUT(k, n)
  k = 0 .. NT-2
  n = k+1 .. NT - 1
  
  :(k / rtileSIZE) % GRIDrows == rowRANK
  :(n / ctileSIZE) % GRIDcols == colRANK
  
  INOUT A <- C1 DSSSSM(k, n, NT-1)
          -> A(k, n)
          
BODY
/* nothing */
END
  
DSSSSM(k, n, m)
  k = 0   .. NT-2
  n = k+1 .. NT-1
  m = k+1 .. NT-1

  // Parallel partitioning
  : (m / rtileSIZE) % GRIDrows == rowRANK
  : (n / ctileSIZE) % GRIDcols == colRANK

  IN C3   <- C1 DTSTRF(k, m)
  IN dL   <- dL DTSTRF(k, m)                                       [LITTLE_L]
  IN IPIV <- IPIV DTSTRF(k, m)                                     [PIVOT_VECT]

  INOUT C2 <- (k == 0)   ? A(m, n)      : C2 DSSSSM(k-1, n, m)
           -> ((n == k+1) & (m == k+1)) ? LU DGETRF(k+1)
	   -> ((n == k+1) & (k  < m-1)) ? C1 DTSTRF(k+1, m)
	   -> ((k  < n-1) & (m == k+1)) ? C1 DGESSM(k+1, n)
	   -> ((k  < n-1) & (k  < m-1)) ? C2 DSSSSM(k+1, n, m)
  INOUT C1 <- (m == k+1)  ? C1 DGESSM(k, n) : C1 DSSSSM(k, n, m-1)
  	   -> (m == NT-1) ? A DSSSSM_OUT(k, n)  : C1 DSSSSM(k, n, m+1)

BODY
#if !defined(DPLASMA_DRY_RUN)
                debug_warning(context->eu_id, "before", "DSSSSM", k, n, m);
                debug_matrix(context->eu_id, C1, "C1=A", k, n);
                debug_matrix(context->eu_id, C2, "C2=A", m, n);
                debug_l(context->eu_id, dL, "dL=L", m, k);
                debug_matrix(context->eu_id, C3, "C3=A", m, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", m, k);
                CORE_dssssm(
                    descA.nb,
                    m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
                    n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
                    descL.mb,
                    descA.nb,
                    C1 /*A(k, n)*/, descA.nb,
                    C2 /*A(m, n)*/, descA.nb,
                    dL /*L(m, k)*/, descL.mb,
                    C3 /*A(m, k)*/, descA.nb,
                    IPIV /*IPIV(m, k)*/);
                debug_warning(context->eu_id, "after", "DSSSSM", k, n, m);
                debug_matrix(context->eu_id, C1, "C1=A", k, n);
                debug_matrix(context->eu_id, C2, "C2=A", m, n);
                debug_l(context->eu_id, dL, "dL=L", m, k);
                debug_matrix(context->eu_id, C3, "C3=A", m, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", m, k);
 #else
    OUTPUT(("void task_DSSSSM(double *C1,  double *C2, double *dL, double *L, int *IPIV)"));
#endif  /*!defined(DPLASMA_DRY_RUN)*/
END


/************************************************************************************
 *                                   DGESSM                                         *
 ************************************************************************************/

DGESSM(k, n)

  k = 0..NT-2
  n = k+1..NT-1

  // Parallel partitioning
  : (k / rtileSIZE) % GRIDrows == rowRANK
  : (n / ctileSIZE) % GRIDcols == colRANK

  IN    L    <- LU DGETRF_HACK(k)                                  [LOWER_TILE]
  IN    IPIV <- IPIV DGETRF(k)                                     [PIVOT_VECT]
  INOUT C1 <- (k == 0) ? A(k, n) : C2 DSSSSM(k-1, n, k)
           -> C1 DSSSSM(k, n, k+1)

BODY
#if !defined(DPLASMA_DRY_RUN)
                debug_warning(context->eu_id, "before", "DGESSM", k, n, -1);
                debug_matrix(context->eu_id, L, "L=A", k, k);
                debug_matrix(context->eu_id, C1, "C1=A", k, n);
                debug_ipiv(context->eu_id, IPIV, "IPIV", k, k);
                CORE_dgessm(
                    k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
                    n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
                    descA.nb,
                    descL.mb,
                    IPIV /*IPIV(k, k)*/,
                    L /*A(k, k)*/, descA.nb,
                    C1 /*A(k, n)*/, descA.nb);
                debug_warning(context->eu_id, "after", "DGESSM", k, n, -1);
                debug_matrix(context->eu_id, L, "L=A", k, k);
                debug_matrix(context->eu_id, C1, "C1=A", k, n);
                debug_ipiv(context->eu_id, IPIV, "IPIV", k, k);
#else
     OUTPUT(("void task_DGESSM(int *IPIV, double *L, double *C1)"));
#endif  /* !defined(DPLASMA_DRY_RUN) */
END



/************************************************************************************
 *                                   DTSTRF                                         *
 ************************************************************************************/


DTSTRF_OUT(k)
  k = 0 .. NT-2
  
  : (k / rtileSIZE) % GRIDrows == rowRANK
  : (k / ctileSIZE) % GRIDcols == colRANK
  
  INOUT A <- U DTSTRF(k, NT-1) [UPPER_TILE]
          -> A(k, k)           [UPPER_TILE]
          
BODY
/* nothing */
END


DTSTRF(k, m)
  k = 0..NT-2
  m = k+1..NT-1

  // Parallel partitioning
  : (m / rtileSIZE) % GRIDrows == rowRANK
  : (k / ctileSIZE) % GRIDcols == colRANK

  INOUT C1 <- (k == 0) ? A(m, 0) : C2 DSSSSM(k-1, k, m)
           -> C3 DSSSSM(k, k+1..NT-1, m)
           -> A(m, k)
  INOUT U  <- (m == k+1) ? LU DGETRF(k) : U DTSTRF(k, m-1)         [UPPER_TILE]
           -> (m == NT-1) ? A DTSTRF_OUT(k) : U DTSTRF(k, m+1)     [UPPER_TILE]
  INOUT dL <- L(m, k)                                              [LITTLE_L]
           -> dL DSSSSM(k, k+1..NT-1, m)                           [LITTLE_L]
           -> L(m, k)                                              [LITTLE_L]
  INOUT IPIV <- IPIV(m, k)                                         [PIVOT_VECT]
             -> IPIV DSSSSM(k, k+1..NT-1, m)                       [PIVOT_VECT]
             -> IPIV(m, k)                                         [PIVOT_VECT]

BODY
#if !defined(DPLASMA_DRY_RUN)
                int iinfo = 0;
                void* work = dplasma_private_memory_pop(work_pool);
                debug_warning(context->eu_id, "before", "DTSTRF", k, m, -1);
                debug_matrix(context->eu_id, U, "U=A", k, k);
                debug_matrix(context->eu_id, C1, "C1=A", m, k);
                debug_l(context->eu_id, dL, "dL=L", m, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", m, k);
                CORE_dtstrf(
                    m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
                    k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
                    descL.mb,
                    descA.nb,
                    U /*A(k, k)*/, descA.nb,
                    C1 /*A(m, k)*/, descA.nb,
                    dL /*L(m, k)*/, descL.mb,
                    IPIV /*IPIV(m, k)*/, 
                    work, descL.nb, &iinfo);
                debug_warning(context->eu_id, "after", "DTSTRF", k, m, -1);
                debug_matrix(context->eu_id, U, "U=A", k, k);
                debug_matrix(context->eu_id, C1, "C1=A", m, k);
                debug_l(context->eu_id, dL, "dL=L", m, k);
                debug_ipiv(context->eu_id, IPIV, "IPIV", m, k);
                if (_PLASMA_INFO == 0 && iinfo > 0 && m == descA.mt-1)
                    _PLASMA_INFO = iinfo + descA.nb*k;
                dplasma_private_memory_push(work_pool, work);
#else
     OUTPUT(("void task_DTSTRF(double *U, double *L, double *dL, int *IPIV)"));
#endif  /* !defined(DPLASMA_DRY_RUN) */
END
