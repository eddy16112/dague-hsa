extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

extern int uplo;
int PLASMA_INFO = 0;

#include "dague.h"
#include "remote_dep.h"

#include "data_distribution.h"

#ifdef DAGUE_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DAGUE_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
NB           [int]
SIZE         [int]
PRI_CHANGE   [int]

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) (high_priority)

// Execution space
k = 0..SIZE-1

// Parallel partitioning
: A(k, k)

// Parameters
RW    T <- (k == 0) ? A(k, k) : T SYRK(k-1, k)
        -> T TRSM(k, k+1..SIZE-1)
        -> A(k, k)

; (k >= (SIZE - PRI_CHANGE)) ? (SIZE - k) * (SIZE - k) * (SIZE - k) : 1000000000

BODY
    CORE(
        dpotrf, (
            uplo,
            NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
            T /* A(k, k) */, NB, /*A.nb,*/
            &PLASMA_INFO )
        );
    OUTPUT((
        "thread %d CORE_dpotrf( %s, %d, A(%d,%d)[%p], %d)\n",
            context->eu_id, (uplo == PlasmaLower) ? "PlasmaLower" : "PlasmaUpper",
            NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
            k, k, T, NB /*A.nb,*/ )
        );
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, n) (high_priority)

// Execution space
k = 0..SIZE-1
n = k+1..SIZE-1

// Parallel partitioning
: A(n, k)

// Parameters
READ  T <- T POTRF(k)
RW    C <- (k == 0) ? A(n, k) : C GEMM(k-1, n, k)
        -> A SYRK(k, n)
        -> A GEMM(k, n+1..SIZE-1, n)
        -> B GEMM(k, n, k+1..n-1)
        -> A(n, k)

; (n >= (SIZE - PRI_CHANGE)) ? (SIZE - n) * (SIZE - n) * (SIZE - n) + 3 * (2 * SIZE - k - n - 1) * (n - k) : 1000000000

BODY
    if( uplo == PlasmaLower ) {
        CORE(
            dtrsm, (
                PlasmaRight, PlasmaLower, PlasmaTrans, PlasmaNonUnit,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB, /*A.nb,*/
                     C /*A(n, k)*/, NB /*A.nb*/ )
            );
        OUTPUT(( 
            "thread %d CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d)\n",
                context->eu_id, "PlasmaRight", "PlasmaLower", "PlasmaTrans", "PlasmaNonUnit",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, k, k, T, NB, /*A.nb,*/
                     n, k, C, NB /*A.nb*/ )
            );
    } else {
        CORE(
            dtrsm, (
                PlasmaLeft, PlasmaUpper, PlasmaTrans, PlasmaNonUnit,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB, /*A.nb,*/
                     C /*A(k, n)*/, NB /*A.nb*/ )
            );
       OUTPUT((
            "thread %d CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
                context->eu_id, "PlasmaLeft", "PlasmaUpperr", "PlasmaTrans", "PlasmaNonUnit",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, k, k, NB, /*A.nb,*/
                     k, n, NB /*A.nb*/ )
            );
    }
END


/**************************************************
 *                      SYRK                      *
 **************************************************/
SYRK(k, n) (high_priority)

// Execution space
k = 0..SIZE-1
n = k+1..SIZE-1

// Parallel partitioning
: A(n, n)

//Parameters
READ  A <- C TRSM(k, n)
RW    T <- (k == 0) ? A(n,n) : T SYRK(k-1, n)
        -> (n == k+1) ? T POTRF(k+1) : T SYRK(k+1,n)

; (n >= (SIZE - PRI_CHANGE)) ? (SIZE - n) * (SIZE - n) * (SIZE - n) + 3 * (n - k) : 1000000000

BODY
    if( uplo == PlasmaLower ) {
        CORE(
            dsyrk, (
                PlasmaLower, PlasmaNoTrans,
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(n, k)*/, NB, /*A.nb,*/
                 1.0, T /*A(n, n)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "thread %d CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                context->eu_id, "PlasmaLower", "PlasmaNoTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, A, NB, /*A.nb,*/
                 1.0, n, n, T, NB /*A.nb*/ )
            );
    } else {
        CORE(
            dsyrk, (
                PlasmaUpper, PlasmaTrans,
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(k, n)*/, NB, /*A.nb,*/
                 1.0, T /*A(n, n)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "thread %d CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                context->eu_id, "PlasmaLower", "PlasmaNoTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, k, n, NB, /*A.nb,*/
                 1.0, n, n, NB /*A.nb*/ )
            );
    }
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0..SIZE-1
m = k+2..SIZE-1
n = k+1..m-1

// Parallel partitioning
: A(m, n)

// Parameters
READ  A <- C TRSM(k, n)
READ  B <- C TRSM(k, m)
RW    C <- (k == 0) ? A(m, n) : C GEMM(k-1, m, n)
        -> (n == k+1) ? C TRSM(k+1, m) : C GEMM(k+1, m, n)

; (m >= (SIZE - PRI_CHANGE)) ? (SIZE - m) * (SIZE - m) * (SIZE - m) + 3 * (2 * SIZE - m - n - 3) * (m - n) + 6 * (m - k) : 1000000000

BODY
    if( uplo == PlasmaLower ) {
        CORE(
            dgemm, ( 
                PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, B /*A(m, k)*/, NB, /*A.nb,*/
                      A /*A(n, k)*/, NB, /*A.nb,*/
                 1.0, C /*A(m, n)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "thread %d CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                context->eu_id, "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, B, NB, /*A.nb,*/
                      m, k, A, NB, /*A.nb,*/
                 1.0, m, n, C, NB /*A.nb*/ )
            );
    } else {
        CORE(
            dgemm, (
                PlasmaTrans, PlasmaNoTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(k, n)*/, NB, /*A.nb,*/
                      B /*A(k, m)*/, NB, /*A.nb,*/
                 1.0, C /*A(n, m)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "thread %d CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                context->eu_id, "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, k, n, NB, /*A.nb,*/
                      k, m, NB, /*A.nb,*/
                 1.0, n, m, NB /*A.nb*/ )
            );
    }
END
