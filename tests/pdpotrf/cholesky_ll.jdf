extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

extern PLASMA_desc descA;
extern int uplo;
int PLASMA_INFO;

#include "dplasma.h"
#include "remote_dep.h"

#ifdef DISTRIBUTED
#   include "data_management.h"
    extern DPLASMA_desc ddescA;
    extern MPI_Datatype SYNCHRO;
#   define A(m,n) dplasma_get_local_tile_s(&ddescA, m, n)
#else
#   define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])
#endif

#ifdef DPLASMA_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DPLASMA_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
GRIDrows
GRIDcols
NB
SIZE
colRANK
rowRANK
rtileSIZE
ctileSIZE

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) (high_priority)

// Execution space
k = 0..SIZE-1

// Parallel partitioning
: (k / rtileSIZE) % GRIDrows == rowRANK
: (k / ctileSIZE) % GRIDcols == colRANK

// Parameters
INOUT T <- (k == 0) ? A(k, k) : T SYRK(k, k-1)
        -> T TRSM(k, k+1..SIZE-1)
        -> A(k, k)
OUT   F -> F GEMM(k, k+1..SIZE-1, 0)           [SYNCHRO]

; 10 * (SIZE - k) * (SIZE - k) * (SIZE - k)

BODY
    CORE(
        dpotrf, (
            uplo,
            NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
            T /* A(k, k) */, NB, /*A.nb,*/
            &PLASMA_INFO )
        );
    OUTPUT((
        "CORE_dpotrf( %s, %d, A(%d,%d), %d)\n",
            (uplo == PlasmaLower) ? "PlasmaLower" : "PlasmaUpper",
            NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
            k, k, NB /*A.nb,*/ )
        );
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, m) (high_priority)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1

// Parallel partitioning
: (m / rtileSIZE) % GRIDrows == rowRANK
: (k / ctileSIZE) % GRIDcols == colRANK

// Parameters
IN    T <- T POTRF(k)
INOUT C <- (k == 0) ? A(m, k) : C GEMM(k, m, k-1)
        -> A SYRK(m, k)
        -> A GEMM(m, m+1..SIZE-1, k)
        -> B GEMM(k+1..m-1, m, k)
        -> (m == k+1) ? F SYRK(m, 0) : A(m,k)                [SYNCHRO]
        -> A(m, k)

; 10 * (SIZE - m) * (SIZE - m) * (SIZE - m) + 2

BODY
    if( uplo == PlasmaLower ) {
        CORE(
            dtrsm, (
                PlasmaRight, PlasmaLower, PlasmaTrans, PlasmaNonUnit,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB, /*A.nb,*/
                     C /*A(m, k)*/, NB /*A.nb*/ ) 
            );
        OUTPUT(( 
            "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
                "PlasmaRight", "PlasmaLower", "PlasmaTrans", "PlasmaNonUnit",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, k, k, NB, /*A.nb,*/
                     m, k, NB /*A.nb*/ )
            );
    } else {
        CORE(
            dtrsm, (
                PlasmaLeft, PlasmaUpper, PlasmaTrans, PlasmaNonUnit,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB, /*A.nb,*/
                     C /*A(k, m)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
                "PlasmaLeft", "PlasmaUpper", "PlasmaTrans", "PlasmaNonUnit",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, k, k, NB, /*A.nb,*/
                     k, m, NB /*A.nb*/ )
            );
    }
END


/**************************************************
 *                      SYRK                      *
 **************************************************/
SYRK(k, n)

// Execution space
k = 1..SIZE-1
n = 0..k-1

// Parallel partitioning
: (n / rtileSIZE) % GRIDrows == rowRANK
: (n / ctileSIZE) % GRIDcols == colRANK

//Parameters
IN    A <- C TRSM(n, k)
IN    F <- (n == 0) ? C TRSM(k-1, k) : A(k,k)
INOUT T <- (n == 0) ? A(k, k) : T SYRK(k, n-1)
        -> (n == k-1) ? T POTRF(k) : T SYRK(k, n+1)

; 10 * (SIZE - n) * (SIZE - n) * (SIZE - n) + 1

BODY
    if( uplo == PlasmaLower ) {
        CORE(
            dsyrk, (
                PlasmaLower, PlasmaNoTrans,
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(k, n)*/, NB, /*A.nb,*/
                 1.0, T /*A(k, k)*/, NB /*A.nb*/ )
            );
        OUTPUT(( 
            "CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaLower", "PlasmaNoTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, k, n, NB, /*A.nb,*/
                 1.0, k, k, NB /*A.nb*/ )
            );

    } else {
        CORE(
            dsyrk, (
                PlasmaUpper, PlasmaTrans,
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(n, k)*/, NB, /*A.nb,*/
                 1.0, T /*A(k, k)*/, NB /*A.nb*/ )
            );
        OUTPUT(( 
            "CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaUpper", "PlasmaTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, NB, /*A.nb,*/
                 1.0, k, k, NB /*A.nb*/ )
            );
    }
END


/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM(k, m, n)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1
n = 0..k-1

// Parallel partitioning
: (m / rtileSIZE) % GRIDrows == rowRANK
: (k / ctileSIZE) % GRIDcols == colRANK

// Parameters
IN    A <- C TRSM(n, k)
IN    B <- C TRSM(n, m)
IN    F <- (n == 0) ? F POTRF(k) : A(m,k)                       [SYNCHRO]
INOUT C <- (n == 0) ? A(m, k) : C GEMM(k, m, n-1)
        -> (n == k-1) ? C TRSM(k, m) : C GEMM(k, m, n+1)

; 10 * (SIZE - m) * (SIZE - m) * (SIZE - m) + 3

BODY
    if( uplo == PlasmaLower ) {
        CORE( 
            dgemm, (
                PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, B /*A(m, n)*/, NB, /*A.nb,*/
                      A /*A(k, n)*/, NB, /*A.nb,*/
                 1.0, C /*A(m, k)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, m, n, NB, /*A.nb,*/
                      k, n, NB, /*A.nb,*/
                 1.0, m, k, NB /*A.nb*/ )
            );
    } else {
        CORE(
            dgemm, (
                PlasmaTrans, PlasmaNoTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(n, k)*/, NB, /*A.nb,*/
                      B /*A(n, m)*/, NB, /*A.nb,*/
                 1.0, C /*A(k, m)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaTrans", "PlasmaNoTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, NB, /*A.nb,*/
                      n, m, NB, /*A.nb,*/
                 1.0, k, m, NB /*A.nb*/ )
            );
    }
END
