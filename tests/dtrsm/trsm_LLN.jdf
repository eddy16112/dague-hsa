extern "C" %{
  /**
   * PLASMA include for defined and constants.
   */
  
#include <plasma.h>
#include <core_blas.h>
#include "dague.h"
#include "remote_dep.h"

#include "data_dist/data_distribution.h"

#define DAGUE_CALL_TRACE
#ifdef DAGUE_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DAGUE_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) FN ARGS
#endif

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
Bmb  [int]
Bnb  [int]
Bmt  [int]
Bnt  [int]
Bm   [int]
Bn   [int]
     
Amb  [int]
Anb  [int]
Amt  [int]
Ant  [int]
Am   [int]
An   [int]

trans[int]
diag [int]

alpha[double]

/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, n)

// Execution space
k = 0..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(k,n)

// Parameters
READ  A <- A(k,k)
RW    B <- (k == 0) ? B(0,n) : C GEMM(k-1, k, n)
        -> B GEMM(k, k+1..Bmt-1, n)
        -> B(k, n)

BODY
      double lalpha = k == 0 ? alpha : (double)1.0;    
      CORE(
	   CORE_dtrsm, (
			PlasmaLeft, PlasmaLower, PlasmaNoTrans, diag,
			k == Bmt-1 ? Bm - k * Bmb : Bmb,
			n == Bnt-1 ? Bn - n * Bnb : Bnb,
			lalpha, A /*A(k, k)*/, Amb,
                                B /*B(k, n)*/, Bmb)
	   );

      OUTPUT( ("thread %d CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, "PlasmaRight", "PlasmaLower", "PlasmaTrans", "PlasmaNonUnit",
	       k == Bmt-1 ? Bm - k * Bmb : Bmb,
	       n == Bnt-1 ? Bn - n * Bnb : Bnb,
	       lalpha, k, k, A /*A(k, k)*/, Amb,
	               k, n, B /*B(k, n)*/, Bmb)
	      );
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0..Bmt-1
m = k+1..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A(m, k)
READ  B <- B TRSM(k, n)
RW    C <- (k == 0) ? B(m, n) : C GEMM(k-1, m, n)
        -> (k+1 == m) ? B TRSM(m, n) : C GEMM(k+1, m, n)

BODY
      double lalpha = k == 0 ? alpha : (double)1.0;    
      CORE(
	   CORE_dgemm, (
			PlasmaNoTrans, PlasmaNoTrans,
			m == Bmt-1 ? Bm-m*Bmb : Bmb,
			n == Bnt-1 ? Bn-n*Bnb : Bnb,
			Bmb,
			(double)-1.0, A /* A(m, k)*/ , Amb,
			              B /* B(k, n)*/ , Bmb,
			lalpha,       C /* B(m, n)*/ , Bmb)
	   );

      OUTPUT( ("thread %d CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, "PlasmaNoTrans", "PlasmaNoTrans", 
	       m == Bmt-1 ? Bm-m*Bmb : Bmb,
	       n == Bnt-1 ? Bn-n*Bnb : Bnb,
	       Bmb,
	       (double)-1.0, m, k, A, Amb,
                             k, n, B, Bmb,
	       lalpha,       m, n, C, Bmb)
	      );
END
