extern "C" %{
  /**
   * PLASMA include for defined and constants.
   */
  
#include <plasma.h>
#include <core_blas.h>
#include "dague.h"
#include "remote_dep.h"

#include "data_distribution.h"

#define DAGUE_CALL_TRACE
#ifdef DAGUE_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DAGUE_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) FN ARGS
#endif

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
Bmb  [int]
Bnb  [int]
Bmt  [int]
Bnt  [int]
Bm   [int]
Bn   [int]
     
Amb  [int]
Anb  [int]
Amt  [int]
Ant  [int]
Am   [int]
An   [int]

trans[int]
diag [int]

alpha[double]

/**************************************************
 *                     STARTUP                    *
 **************************************************/

STARTUP(useless)
useless = 0 .. 0

// Parallel partitioning
: B(0,0)

RW USELESS <- B(0,0)
           -> USELESS READVALS(0 .. Bmt-1)
BODY
  OUTPUT( ("thread %d STARTUP\n",
	   context->eu_id)
	  );
  /* Nothing relevant */
END

/**************************************************
 *                     READVALS                   *
 **************************************************/
READVALS(i)
i = 0 .. Bmt-1

// Parallel partitioning
     : B(i,0)

READ USELESS <- USELESS STARTUP(0)
  RW   B <- B(i,0)
  -> B TRSM(i,0)
BODY
      OUTPUT( ("thread %d READVALS ( %d )\n",
	       context->eu_id, i)
	      );
  /* Emptiness */
END

/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(m, k)

// Execution space
k = Bnt-1..0
m = 0..Bmt-1

// Parallel partitioning
: B(m, k)

// Parameters
READ  A <- A(k,k)
RW    B <- (k == Bmt-1 ) ? B READVALS(m) : C GEMM(k+1, m, k)
        -> B GEMM(k, m, 0..k-1)
        -> B(m, k)

BODY
      double lalpha = k == 0 ? alpha : (double)1.0;    
      CORE(
	   CORE_dtrsm, (
			PlasmaRight, PlasmaLower, trans, diag,
			m == Bmt-1 ? Bm - m * Bmb : Bmb,
			k == Bnt-1 ? Bn - k * Bnb : Bnb,
			lalpha, A /*A(k, k)*/, Amb,
                                B /*B(m, k)*/, Bmb)
	   );

      OUTPUT( ("thread %d CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, "PlasmaRight", "PlasmaLower", "Trans/ConjTrans", "PlasmaNonUnit",
	       m == Bmt-1 ? Bm - m * Bmb : Bmb,
	       k == Bnt-1 ? Bn - k * Bnb : Bnb,
	       lalpha, k, k, A /*A(k, k)*/, Amb,
                       m, k, B /*B(m, k)*/, Bmb)
	      );
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = Bnt-1..0
m = 0..Bmt-1
n = k-1..0

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A(m, k)
READ  B <- B TRSM(m, k)
RW    C <- (k == Bmt-1) ? B(m, n) : C GEMM(k+1, m, n)
        -> (k-1 == n)   ? B TRSM(m, n) : C GEMM(k-1, m, n)

BODY
      CORE(
	   CORE_dgemm, (
			PlasmaNoTrans, trans,
			m == Bmt-1 ? Bm-m*Bmb : Bmb,
			Bmb,
			k == Bnt-1 ? Bn-k*Bnb : Bnb,
			(double)-1.0, B /* B(m, k)*/ , Bmb,
			              A /* A(k, n)*/ , Amb,
			lalpha,       C /* B(m, n)*/ , Bmb)
	   );

      OUTPUT( ("thread %d CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, "PlasmaNoTrans", "PlasmaNoTrans", 
	       m == Bmt-1 ? Bm-m*Bmb : Bmb,
	       Bmb,
	       k == Bnt-1 ? Bn-k*Bnb : Bnb,
	       (double)-1.0, m, k, B, Bmb,
                             k, n, A, Amb,
	       lalpha,       m, n, C, Bmb)
	      );
END
