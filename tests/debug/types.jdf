/**
 * Simple data transfer heteoreneity test
 */

extern "C" %{

#include "dplasma.h"
#include "mpi.h"

extern double          *T;
extern unsigned char   *B;
static MPI_Datatype My_Mpi_Char = MPI_CHAR;

#define Tile(d) T
#define Byte(d) B

%}

GRIDrows
GRIDcols
colRANK
rowRANK

A(rank)
/* Sends a local tile from 0 to 1 */
 rank = 0

 : 0 * rank == rowRANK
 : 0 * rank == colRANK

 INOUT TILE <- Tile(0)
            -> TILE B(1)

BODY

	printf("A: %d sends Tile %p to 1\n", rank, TILE);

END

B(rank)
/* Receives a tile from 0 as 1 */
/* Then calls C */
 rank = 1

 : 1 * rank == rowRANK
 : 0 * rank == colRANK

 INOUT TILE <-  TILE A(0)
            ->  TILE C(1)

BODY

	printf("B: %d has received Tile %p, passing it to C\n", rank, TILE);	

END

C(rank)
/* Sends a local byte from 1 to 0 */
/* Then calls D */
 rank = 1

 : 1 * rank == rowRANK
 : 0 * rank == colRANK

 IN    TILE <- TILE B(1) 
 INOUT BYTE <- Byte(0)        [My_Mpi_Char]
            -> BYTE D(0)      [My_Mpi_Char]

BODY

	printf("C: %d has received Tile %p and created Byte %d in %p, sending it to 0\n", 
	       rank, TILE, (int)*(char*)BYTE, BYTE);

END

D(rank)
/* Receives a remote byte from 1 as 0, and complete */
 rank = 0

 : 0 * rank == rowRANK
 : 0 * rank == colRANK

 INOUT BYTE <- BYTE C(1)     [My_Mpi_Char]
            -> Byte(0)       [My_Mpi_Char]

BODY

	printf("D: %d has received Byte %d in %p and stored it in local allocated memory %p\n",
	       rank, (int)*(char*)BYTE, BYTE, Byte(0));

END
