/**
 * Simple data transfer heteoreneity test
 */

extern "C" %{

#include "dplasma.h"
#include "mpi.h"

double T[TILE_SIZE];
char   B;
MPI_Datatype My_Mpi_Char = MPI_CHAR;

#define Tile() T
#define Byte() (&B)

%}

GRIDrows
GRIDcols
colRANK
rowRANK

A(rank)
/* Sends a local tile from 0 to 1 */
 rank = 0..1

 : rank % GRIDrows == rowRANK

 INOUT TILE <- (rank == 0) ? Tile()
            -> (rank == 0) ? TILE B(1)

BODY

	printf("A: %d sends Tile %p to 1\n", rank, TILE);

END

B(rank)
/* Receives a tile from 0 as 1 */
/* Then calls C */
 rank = 0..1

 : rank % GRIDrows == rowRANK

 INOUT TILE <- (rank == 1) ? TILE A(0)
            -> (rank == 1) ? TILE C(1)

BODY

	printf("B: %d has received Tile %p, passing it to C\n", rank, TILE);	

END

C(rank)
/* Sends a local byte from 1 to 0 */
/* Then calls D */
 rank = 0..1

 : rank % GRIDrows == rowRANK

 IN    TILE <- (rank == 1) ? TILE B(1)
 INOUT BYTE <- (rank == 1) ? Byte()        [My_Mpi_Char]
            -> (rank == 1) ? BYTE D(0)     [My_Mpi_Char]

BODY

	printf("C: %d has received Tile %p and created Byte %p, sending it to 0\n", rank, TILE, BYTE);

END

D(rank)
/* Receives a remote byte from 1 as 0, and complete */
 rank = 0..1

 : rank % GRIDrows == rowRANK

 INOUT BYTE <- (rank == 0) ? BYTE D(1)     [My_Mpi_Char]
            -> (rank == 0) ? Byte()        [My_Mpi_Char]

BODY

	printf("D: %d has received Byte %p and stored it in local allocated memory\n", rank, BYTE);

END
