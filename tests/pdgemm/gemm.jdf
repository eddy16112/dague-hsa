extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dague.h"
#include "remote_dep.h"
#include "data_dist/data_distribution.h"

#ifdef DPLASMA_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DPLASMA_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/*
 * Globals
 */
NB
SIZE
alpha    [float]
beta     [float]

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(n, m, k)

// Execution space
n = 0 .. SIZE-1
m = 0 .. SIZE-1
k = 0 .. SIZE-1

// Parallel partitioning
: C(n, m)

// Parameters
READ A <- (k == 0) ? A(n,k) : A GEMM( n, (m+SIZE-1) % SIZE, k-1 )
       -> (k != SIZE-1) ? A GEMM( n, (m+1) % SIZE, k+1 )
READ B <- (k == 0) ? B(k,m) : B GEMM( (n+SIZE-1) % SIZE, m, k-1 )
       -> (k != SIZE-1) ? B GEMM( (n+1) % SIZE, m, k+1 )
RW   C <- (k == 0) ? C(n,m) : C GEMM( n, m, k-1 )
       -> (k == SIZE-1) ? C(n,m) : C GEMM( n, m, k+1 )
BODY
        CORE(
            dgemm, (
                PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(n, k)*/, NB, /*A.nb,*/
                      B /*B(k, m)*/, NB, /*A.nb,*/
                 1.0, C /*C(n, m)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
                "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                alpha, i, k, NB, /*A.nb,*/
                      k, m, NB, /*A.nb,*/
                beta, n, m, NB /*A.nb*/ )
            );
END

extern "C" %{
#if 0
/*A == A(n,k)*/
READ A <- (m==0)          ? A(n,k) : A DGEMM(n,m-1,k)
       -> (m <= (SIZE-2)) ? A DGEMM(n,m+1,k)

/*B == B(k,m)*/
READ B <- (n==0)          ? B(k,m) : B DGEMM(n-1,m,k)
       -> (n <= (SIZE-2)) ? B DGEMM(n+1,m,k)

/*C == C(n,m)*/
RW C   <- (k==0)        ? C(n,m) : C DGEMM(n,m,k-1)
       -> (k==(SIZE-1)) ? C(n,m) : C DGEMM(n,m,k+1)
#endif

%}
