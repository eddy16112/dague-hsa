extern "C" %{
#define idecision(k)  (*((int*)decision(k)))
%}

A        [ type = "dague_ddesc_t *" ]
NT       [ type = "int" ]
P        [ type = "int" ]
decision [ type = "dague_ddesc_t *" ]

Choice(k)

k = 0 .. NT+1
: A(k)

RW D  <- (k == 0) ? A(k)
      <- inline_c %{ return (k > 0) && (idecision(k-1) == 1); %} ? D TA(k-1)
      <- inline_c %{ return (k > 0) && (idecision(k-1) == 2); %} ? D TB(k-1)
      -> D Selector(0..P-1, k)
RW C  <- (k <= NT) ? C creader(k) : decision(k)   [type=DECISION]
      -> (k <= NT) ? C Selector(0..P-1, k)        [type=DECISION]
CTL T -> (k == NT+1) ? T Terminate(0..P-1)        [type=DECISION]

BODY
	int d;
	if(k <= NT ) {
             d = rand() % 2 + 1;
	     idecision(k) = d ;
	     printf("Execute Choice(%d), choosing decision %c\n", k, d == 0 ? '#' : (d == 1 ? 'A' : 'B'));
        }
END

Terminate(pos)
pos = 0..P-1
:A(pos)

CTL T <- T Choice(NT+1)

BODY
     printf("Execute Terminate(%d): Terminating the DAG\n", pos);
     dague_object_terminate( this_task->dague_object );
END
	     
creader(k)
k = 0..NT
:A (k)

RW C  <- decision(k)                 [type=DECISION]
      -> C Choice(k)                 [type=DECISION]
CTL T <- (k > 0) ? T2 SelectorDone(P-1, k-1)

BODY
    printf("Reading the next decision address and passing it to Choice(%d)\n", k);
END

SelectorDone(pos, k)

pos = 0..P-1
k = 0..NT

:A(pos)

CTL T1 <- T Selector(pos, k)
CTL T2 <- (pos>0) ? T2 SelectorDone(pos-1, k)
       -> (pos<P-1) ? T2 SelectorDone(pos+1, k)
       -> inline_c %{ return (pos == P-1) && idecision(k) == 1; %} ? T TA(k)
       -> inline_c %{ return (pos == P-1) && idecision(k) == 2; %} ? T TB(k)
       -> (pos == P-1) ? T creader(k+1)

BODY
       printf("Selector Broadcast at step %d is done on rank %d\n", k, pos);
       if( pos == P-1 ) {
             printf(" Enabling creader and the rest at %d\n", k+1);
       }
END

Selector(pos, k)

pos = 0..P-1
k   = 0..NT

:A(pos)

RW D   <- D Choice(k)
       -> inline_c %{ return (pos == (k%P)) && idecision(k) == 1; %} ? D TA(k)
       -> inline_c %{ return (pos == (k%P)) && idecision(k) == 2; %} ? D TB(k)
READ C <- C Choice(k)             [type=DECISION]
CTL  T -> T1 SelectorDone(pos, k)

BODY
     printf("Execute Selector(%d, %d): recording decision %c at step %d on the rank %d\n", 
            pos, k, *(int*)C == 0 ? '#' : (*(int*)C == 1 ? 'A' : 'B'), k, pos);
     idecision(k) = *(int*)C;
END

TA(k)

k = 0 .. NT
: A(k) 

RW  D <- inline_c %{ return idecision(k) == 1; %} ? D Selector(k%P, k)
      -> inline_c %{ return idecision(k) == 1; %} ? D Choice(k+1)
CTL T <- inline_c %{ return idecision(k) == 1; %} ? T2 SelectorDone(P-1, k)

BODY
	printf("Execute TA(%d)\n", k);
END

TB(k)

k = 0 .. NT

: A(k) 

RW  D <- inline_c %{ return idecision(k) == 2; %} ? D Selector(k%P, k)
      -> inline_c %{ return idecision(k) == 2; %} ? D Choice(k+1)
CTL T <- inline_c %{ return idecision(k) == 2; %} ? T2 SelectorDone(P-1, k)

BODY
	printf("Execute TB(%d)\n", k);
END
