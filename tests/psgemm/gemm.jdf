extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_sblas.h>

#include "dague.h"
#include "remote_dep.h"
#include "data_dist/data_distribution.h"

#ifdef DPLASMA_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DPLASMA_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/*
 * Globals
 */
NB
SIZE

/**************************************************
 *                       GEMM                     *
 **************************************************/

GEMM(i,j,k)

// Execution space
i = 0 .. SIZE-1
j = 0 .. SIZE-1
k = 0 .. SIZE-1

// Parallel partitioning
: C(i, j)

// Parameters
READ A <- (k == 0) ? A(i,k) : A GEMM( i, (j+SIZE-1) % SIZE, k-1 )
       -> (k != SIZE-1) ? A GEMM( i, (j+1) % SIZE, k+1 )
READ B <- (k == 0) ? B(k,j) : B GEMM( (i+SIZE-1) % SIZE, j, k-1 )
       -> (k != SIZE-1) ? B GEMM( (i+1) % SIZE, j, k+1 )
RW   C <- (k == 0) ? C(i,j) : C GEMM( i, j, k-1 )
       -> (k == SIZE-1) ? C(i,j) : C GEMM( i, j, k+1 )
BODY
        CORE(
            sgemm, (
                PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(i, k)*/, NB, /*A.nb,*/
                      B /*B(k, j)*/, NB, /*A.nb,*/
                 1.0, C /*C(i, j)*/, NB /*A.nb*/ )
            );
        OUTPUT((
            "CORE_sgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
                "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, i, k, NB, /*A.nb,*/
                      k, j, NB, /*A.nb,*/
                 1.0, i, j, NB /*A.nb*/ )
            );
END
