extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>

#if defined(USE_MPI)
#include <mpi.h>
#include "data_management.h"
extern MPI_Datatype LOWER_TILE, UPPER_TILE, PIVOT_VECT, LITTLE_L;
extern DPLASMA_desc ddescA;
extern DPLASMA_desc ddescT;

#define A(m,n) dplasma_get_local_tile_s(&ddescA, m, n)
#define T(m,n) dplasma_get_local_tile_s(&ddescT, m, n)

#define descA ddescA
#define descT ddescT

#else
extern PLASMA_desc descA;
extern PLASMA_desc descT;

#define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])
#define T(m,n) &(((double*)descT.mat)[descT.bsiz*(m)+descT.bsiz*descT.lmt*(n)])

#endif

int PLASMA_INFO;

#define OUTPUT(ARGS) printf ARGS

typedef struct dplasma_memory_pool_t {
    dplasma_atomic_lifo_t lifo;
    struct plasma_context_t *plasma;
    size_t elem_size;
    int elem_type;
} dplasma_memory_pool_t;

extern dplasma_memory_pool_t *work_pool, *tau_pool;
extern void* plasma_private_alloc(void*, size_t, int);

int dplasma_private_memory_init( dplasma_memory_pool_t* pool,
                                 size_t size,
                                 int type )
{
    dplasma_atomic_lifo_construct( &(pool->lifo) );
    pool->elem_size = size;
    pool->elem_type = type;
    pool->plasma = NULL;
    return 0;
}

void* dplasma_private_memory_pop(dplasma_memory_pool_t* pool)
{
    dplasma_list_item_t* elem = dplasma_atomic_lifo_pop(&(pool->lifo));
    if( NULL == elem ) {
        elem = (dplasma_list_item_t*)plasma_private_alloc(pool->plasma, pool->elem_size, pool->elem_type);
    }
    return elem;
}

void dplasma_private_memory_push(dplasma_memory_pool_t* pool, void* memory)
{
    dplasma_list_item_t* item = DPLASMA_LIST_ITEM_SINGLETON(memory);
    dplasma_atomic_lifo_push( &(pool->lifo), item );
}

int dgels_private_memory_initialization(struct plasma_context_t *plasma)
{
    work_pool = (dplasma_memory_pool_t*)malloc(sizeof(dplasma_memory_pool_t));
    dplasma_private_memory_init( work_pool, descT.mb*descT.nb, descT.dtyp );
    work_pool->plasma = plasma;

    tau_pool = (dplasma_memory_pool_t*)malloc(sizeof(dplasma_memory_pool_t));
    dplasma_private_memory_init( tau_pool, descA.nb, descA.dtyp );
    tau_pool->plasma = plasma;

    return 0;
}

int dgels_private_memory_finalization(void)
{
    return 0;
}

%}

GRIDrows
GRIDcols
NB
MT
NT
MINMTNT = ((MT < NT) ? MT : NT)
colRANK
rowRANK

/*****************************************
 9:11
*/
DGEQRT(k)

  // Execution space
  k = 0..MINMTNT-1

  // Parallel partitioning
  : k % GRIDrows == rowRANK
  : k % GRIDcols == colRANK

  INOUT RV1 <- (k == 0)    ? A(0,0) : C2 DSSMQR(k-1,k,k)
            -> (k == MT-1) ? A(k,k) : R DTSQRT(k,k+1)     [UPPER_TILE]
            -> A(k,k)                                     [LOWER_TILE]
  INOUT T   <- T(k,k)                                     [PIVOT_VECT]
            -> T DORMQR(k, k+1..NT-1)                     [PIVOT_VECT]
            -> T(k,k)                                     [PIVOT_VECT]

BODY
#if !defined(DPLASMA_DRY_RUN)
    void* work = dplasma_private_memory_pop(work_pool);
    void* tau = dplasma_private_memory_pop(tau_pool);
    CORE_dgeqrt(
        k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
        k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
        descT.mb,
        RV1 /*A(k, k)*/, descA.nb,
        T /*T(k, k)*/, descT.mb,
        tau, work);
    dplasma_private_memory_push(tau_pool, tau);
    dplasma_private_memory_push(work_pool, work);
#else
    OUTPUT(( "CORE_dgeqrt"));
#endif  /* DPLASMA_DRY_RUN */
END

/*****************************************
 17:21
*/
DTSQRT(k,m)

  // Execution space
  k = 0..MINMTNT-2
  m = k+1..MT-1

  // Parallel partitioning
  : m % GRIDrows == rowRANK
  : k % GRIDcols == colRANK

  INOUT V2 <- (k == 0) ? A(m,0) : C2 DSSMQR(k-1,k,m)
           -> V2 DSSMQR(k,k+1..NT-1,m)
           -> A(m,k)
  INOUT R  <- (m == k+1) ? RV1 DGEQRT(k) : R DTSQRT(k,m-1)             [UPPER_TILE]
           -> (m == MT-1) ?  V1 DORMQR(k,k+1..NT-1) : R DTSQRT(k,m+1)  [UPPER_TILE]
  INOUT T  <- T(m,k)                                                   [PIVOT_VECT]
           -> T DSSMQR(k,k+1..NT-1,m)                                  [PIVOT_VECT]
           -> T(m,k)                                                   [PIVOT_VECT]

BODY
#if !defined(DPLASMA_DRY_RUN)
    void* work = dplasma_private_memory_pop(work_pool);
    void* tau = dplasma_private_memory_pop(tau_pool);
    CORE_dtsqrt(
        m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
        k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb,
        descT.mb,
        R  /*A(k, k)*/, descA.nb,
        V2 /*A(m, k)*/, descA.nb,
        T  /*T(m, k)*/, descT.mb,
        tau, work);
    dplasma_private_memory_push(tau_pool, tau);
    dplasma_private_memory_push(work_pool, work);
#else
    OUTPUT(( "CORE_dtsqrt"));
#endif  /* DPLASMA_DRY_RUN */
END

/*****************************************
 28:31
*/
DORMQR(k,n)

  // Execution space
  k = 0..MINMTNT-2
  n = k+1..NT-1

  // Parallel partitioning
  : k % GRIDrows == rowRANK
  : n % GRIDcols == colRANK

  IN V1    <- R DTSQRT(k, MT-1)                         [UPPER_TILE]
  IN T     <- T DGEQRT(k)                               [PIVOT_VECT]
  INOUT C1 <- (k == 0) ? A(k,n) : C2 DSSMQR(k-1,n,k)
           -> C1 DSSMQR(k,n,k+1)

BODY
#if !defined(DPLASMA_DRY_RUN)
    void* work = dplasma_private_memory_pop(work_pool);
    CORE_dormqr(
        PlasmaLeft, PlasmaTrans,
        k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
        n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
        descT.mb,
        k == descA.mt-1 ? descA.m-k*descA.nb : descA.nb,
        V1 /*A(k, k)*/, descA.nb,
        T  /*T(k, k)*/, descT.mb,
        C1 /*A(k, n)*/, descA.nb,
        work, descT.nb);
    dplasma_private_memory_push(work_pool, work);
#else
    OUTPUT(( "CORE_dormqr"));
#endif  /* DPLASMA_DRY_RUN */ 
END

/*****************************************
 37:41
*/
DSSMQR_OUT(k, n)
  k = 0 .. MINMTNT-2
  n = k+1 .. NT - 1
  
  :k % GRIDrows == rowRANK
  :n % GRIDcols == colRANK
  
  INOUT A <- C1 DSSMQR(k, n, MT-1)
          -> A(k, n)
          
BODY
/* nothing */
END

DSSMQR(k,n,m)

  // Execution space
  k = 0   .. MINMTNT-2
  n = k+1 .. NT-1
  m = k+1 .. MT-1

  // Parallel partitioning
  : m % GRIDrows == rowRANK
  : n % GRIDcols == colRANK

  IN V2 <- V2 DTSQRT(k,m)
  IN T  <- T DTSQRT(k,m)                                           [PIVOT_VECT]

  INOUT C2 <- (k == 0) ? A(m,n) : C2 DSSMQR(k-1,n,m)
           -> ((n == k+1) & (m == k+1)) ? RV1 DGEQRT(k+1)
           -> ((n == k+1) & (k  < m-1)) ? V2 DTSQRT(k+1,m)
           -> ((k  < n-1) & (m == k+1)) ? C1 DORMQR(k+1,n)
           -> ((k  < n-1) & (k  < m-1)) ? C2 DSSMQR(k+1,n,m)
  INOUT C1 <- (m == k+1) ? C1 DORMQR(k,n) : C1 DSSMQR(k,n,m-1)
           -> (m == MT-1) ? A DSSMQR_OUT(k,n) : C1 DSSMQR(k,n,m+1)

BODY
#if !defined(DPLASMA_DRY_RUN)
    void* work = dplasma_private_memory_pop(work_pool);
    CORE_dssmqr(
        PlasmaLeft, PlasmaTrans,
        descA.nb,
        m == descA.mt-1 ? descA.m-m*descA.nb : descA.nb,
        n == descA.nt-1 ? descA.n-n*descA.nb : descA.nb,
        descT.mb,
        descA.nb,
        C1 /*A(k, n)*/, descA.nb,
        C2 /*A(m, n)*/, descA.nb,
        V2 /*A(m, k)*/, descA.nb,
        T  /*T(m, k)*/, descT.mb,
        work, descT.mb);
    dplasma_private_memory_push(work_pool, work);
#else
    OUTPUT(( "CORE_dssmqr"));
#endif  /* DPLASMA_DRY_RUN */ 
END

