#pragma css task inout(A[200*200]) output(IPIV[200])
void task_DGETRF(double *A, int *IPIV)

#pragma css task inout(U[200*200], L[200*200]) output(dL[200*40], IPIV[200])
void task_DTSTRF(double *U, double *L, double *dL, int *IPIV)

#pragma css task input(L[200*40], IPIV[200]) inout(C1)
void task_DGESSM(int *IPIV, double *L, double *C1)

#pragma css task input(dL[200*40], L[200*200], IPIV[200]) inout(C1[200*200], C2[200*200])
void task_DSSSSM(double *C1,  double *C2, double *dL, double *L, int *IPIV)

#pragma css start
for (k = 0; k < BB; k++) {

    task_DGETRF( A(k, k), IPIV(k, k));

    for (m = k+1; m < BB; m++){
        task_DTSTRF( A(k, k), A(m, k), L(m, k), IPIV(m, k));
    }

    for (n = k+1; n < BB; n++) {
        task_DGESSM( IPIV(k, k), A(k, k), A(k, n));

        for (m = k+1; m < BB; m++){
            task_DSSSSM( A(k, n), A(m, n), L(m, k), A(m, k), IPIV(m, k));
        }
    }
}
#pragma css finish
