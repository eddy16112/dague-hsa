extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>
#include "data_management.h"
extern DPLASMA_desc descA;
extern PLASMA_desc local_desc;
int PLASMA_INFO;

#ifdef USE_MPI
#define A(m,n) dplasma_get_local_tile_s(&descA, m, n)
#else
#define A(m,n) &(((double*)local_desc.mat)[local_desc.bsiz*(m)+local_desc.bsiz*local_desc.lmt*(n)])
#endif

/* Define it to shortcut the lookup for the local variables. */
#define DPLASMA_HOOK_OPTIMIZED

#ifdef DPLASMA_CALL_TRACE
#define OUTPUT(ARG)  printf ARG
#else
#define OUTPUT(ARG)
#endif
%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
GRIDrows
GRIDcols
NB
SIZE
colRANK
rowRANK
stileSIZE

// Name
POTRF(k)

// Execution space
k = 0..SIZE-1

// Parallel partitioning
: (k / stileSIZE) % GRIDrows == rowRANK
: (k / stileSIZE) % GRIDcols == colRANK

// Parameters
INOUT T <- (k == 0) ? A(k, k) : T SYRK(k, k-1)
        -> T TRSM(k, k+1..SIZE-1)
        -> A(k, k)

BODY
#ifdef DPLASMA_EXECUTE
    CORE_dpotrf( PlasmaLower,
                 NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                 T /*A(k, k)*/, NB, /*A.nb,*/
                 &PLASMA_INFO); 
#endif  /* DPLASMA_EXECUTE */
    OUTPUT(( "CORE_dpotrf( %s, %d, A(%d,%d), %d)\n",
             "PlasmaLower",
             NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
             k, k, NB /*A.nb,*/));

END


// Name
TRSM(k, m)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1

// Parallel partitioning
: (m / stileSIZE) % GRIDrows == rowRANK
: (k / stileSIZE) % GRIDcols == colRANK

// Parameters
IN    T <- T POTRF(k)
INOUT C <- (k == 0) ? A(m, k) : C GEMM(k, m, k-1)
        -> A SYRK(m, k)
        -> A GEMM(m, m+1..SIZE-1, k)
        -> B GEMM(k+1..m-1, m, k)
        -> A(m, k)

BODY
#ifdef DPLASMA_EXECUTE
    CORE_dtrsm( PlasmaRight, PlasmaLower, PlasmaTrans, PlasmaNonUnit,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB, /*A.nb,*/
                C /*A(m, k)*/, NB /*A.nb*/);
#endif  /* DPLASMA_EXECUTE */
    OUTPUT(( "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
             "PlasmaRight", "PlasmaLower", "PlasmaTrans", "PlasmaNonUnit",
             NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
             NB, /*A.nb,*/
             1.0, k, k, NB, /*A.nb,*/
             m, k, NB /*A.nb*/));

END

// Name
SYRK(k, n)

// Execution space
k = 1..SIZE-1
n = 0..k-1

// Parallel partitioning
: (k / stileSIZE) % GRIDrows == rowRANK
: (k / stileSIZE) % GRIDcols == colRANK

//Parameters
IN    A <- C TRSM(n, k)
INOUT T <- (n == 0) ? A(k, k) : T SYRK(k, n-1)
        -> (n == k-1) ? T POTRF(k) : T SYRK(k, n+1)

BODY
#ifdef DPLASMA_EXECUTE
    CORE_dsyrk( PlasmaLower, PlasmaNoTrans,
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, A /*A(k, n)*/, NB, /*A.nb,*/
                1.0, T /*A(k, k)*/, NB /*A.nb*/);
#endif  /* DPLASMA_EXECUTE */

    OUTPUT(("CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
            "PlasmaLower", "PlasmaNoTrans",
            NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
            NB, /*A.nb,*/
            -1.0, k, n, NB, /*A.nb,*/
            1.0, k, k, NB /*A.nb*/));

END

// Name
GEMM(k, m, n)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1
n = 0..k-1

// Parallel partitioning
: (m / stileSIZE) % GRIDrows == rowRANK
: (k / stileSIZE) % GRIDcols == colRANK

// Parameters
IN    A <- C TRSM(n, k)
IN    B <- C TRSM(n, m)
INOUT C <- (n == 0) ? A(m, k) : C GEMM(k, m, n-1)
        -> (n == k-1) ? C TRSM(k, m) : C GEMM(k, m, n+1)
BODY
#ifdef DPLASMA_EXECUTE
    CORE_dgemm( PlasmaNoTrans, PlasmaTrans,
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, B /*A(m, n)*/, NB, /*A.nb,*/
                A /*A(k, n)*/, NB, /*A.nb,*/
                1.0, C /*A(m, k)*/, NB /*A.nb*/);
#endif  /* DPLASMA_EXECUTE */

    OUTPUT(("CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
            "PlasmaNoTrans", "PlasmaTrans",
            NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
            NB, /*A.nb,*/
            NB, /*A.nb,*/
            -1.0, m, n, NB, /*A.nb,*/
            k, n, NB, /*A.nb,*/
            1.0, m, k, NB /*A.nb*/));

END
