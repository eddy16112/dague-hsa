extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>

extern PLASMA_desc descA;
int PLASMA_INFO;

#define A(m,n) &(((double*)descA.mat)[descA.bsiz*(m)+descA.bsiz*descA.lmt*(n)])

/* Define it to shortcut the lookup for the local variables. */
#define DPLASMA_HOOK_OPTIMIZED

#if 0
#define OUTPUT(ARG)  printf ARG
#else
#define OUTPUT(ARG)
#endif

extern int uplo;
%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
GRIDrows = 1
GRIDcols = 1
NB
SIZE
colRANK = 0
rowRANK = 0

/**************************************************
 *                      POTRF                     *
 **************************************************/
// Name
POTRF(k)

// Execution space
k = 0..SIZE-1

// Parallel partitioning
: k % GRIDrows == rowRANK
: k % GRIDcols == colRANK

// Parameters
INOUT T <- (k == 0) ? A(k, k) : T SYRK(k, k-1)
        -> T TRSM(k, k+1..SIZE-1)
        -> A(k, k)

BODY
#ifdef DPLASMA_EXECUTE
    CORE_dpotrf( uplo,
                 NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                 A(k, k), NB, /*A.nb,*/
                 &PLASMA_INFO); 
#else
    OUTPUT(( "CORE_dpotrf( %s, %d, A(%d,%d), %d)\n",
             (uplo == PlasmaLower) ? "PlasmaLower" : "PlasmaUpper",
             NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
             k, k, NB /*A.nb,*/));
#endif  /* DPLASMA_EXECUTE */
END

/**************************************************
 *                      TRSM                      *
 **************************************************/
// Name
TRSM(k, m)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1

// Parallel partitioning
: m % GRIDrows == rowRANK
: k % GRIDcols == colRANK

// Parameters
IN    T <- T POTRF(k)
INOUT C <- (k == 0) ? A(m, k) : C GEMM(k, m, k-1)
        -> A SYRK(m, k)
        -> A GEMM(m, m+1..SIZE-1, k)
        -> B GEMM(k+1..m-1, m, k)
        -> A(k, m)

BODY
#ifdef DPLASMA_EXECUTE
    if( uplo == PlasmaLower ) {
        CORE_dtrsm( PlasmaRight, PlasmaLower, PlasmaTrans, PlasmaNonUnit,
                    NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    1.0, A(k, k), NB, /*A.nb,*/
                    A(m, k), NB /*A.nb*/);
    } else {
        CORE_dtrsm( PlasmaLeft, PlasmaUpper, PlasmaTrans, PlasmaNonUnit,
                    NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    1.0, A(k, k), NB, /*A.nb,*/
                    A(k, m), NB /*A.nb*/);
    }
#else
    if( uplo == PlasmaLower ) {
        OUTPUT(( "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
                 "PlasmaRight", "PlasmaLower", "PlasmaTrans", "PlasmaNonUnit",
                 NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                 NB, /*A.nb,*/
                 1.0, k, k, NB, /*A.nb,*/
                 m, k, NB /*A.nb*/));
    } else {
        OUTPUT(( "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d)\n",
                 "PlasmaLeft", "PlasmaUpper", "PlasmaTrans", "PlasmaNonUnit",
                 NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                 NB, /*A.nb,*/
                 1.0, k, k, NB, /*A.nb,*/
                 k, m, NB /*A.nb*/));
    }
#endif  /* DPLASMA_EXECUTE */
END

/**************************************************
 *                      SYRK                      *
 **************************************************/
// Name
SYRK(k, n)

// Execution space
k = 1..SIZE-1
n = 0..k-1

// Parallel partitioning
: k % GRIDrows == rowRANK
: k % GRIDcols == colRANK

//Parameters
IN    A <- C TRSM(n, k)
INOUT T <- (n == 0) ? A(k, k) : T SYRK(k, n-1)
        -> (n == k-1) ? T POTRF(k) : T SYRK(k, n+1)

BODY
#ifdef DPLASMA_EXECUTE
    if( uplo == PlasmaLower ) {
        CORE_dsyrk( PlasmaLower, PlasmaNoTrans,
                    NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    -1.0, A(k, n), NB, /*A.nb,*/
                    1.0, A(k, k), NB /*A.nb*/);
    } else {
        CORE_dsyrk( PlasmaUpper, PlasmaTrans,
                    NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    -1.0, A(n, k), NB, /*A.nb,*/
                    1.0, A(k, k), NB /*A.nb*/);
    }
#else
    if( uplo == PlasmaLower ) {
        OUTPUT(("CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaLower", "PlasmaNoTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, k, n, NB, /*A.nb,*/
                1.0, k, k, NB /*A.nb*/));
    } else {
        OUTPUT(("CORE_dsyrk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaUpper", "PlasmaTrans",
                NB, /*k == A.nt-1 ? A.n-k*A.nb : A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, NB, /*A.nb,*/
                1.0, k, k, NB /*A.nb*/));
    }
#endif  /* DPLASMA_EXECUTE */
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0..SIZE-1
m = k+1..SIZE-1
n = 0..k-1

// Parallel partitioning
: m % GRIDrows == rowRANK
: k % GRIDcols == colRANK

// Parameters
IN    A <- C TRSM(n, k)
IN    B <- C TRSM(n, m)
INOUT C <- (n == 0) ? A(m, n) : C GEMM(k, m, n-1)
        -> (n == k-1) ? C TRSM(k, m) : C GEMM(k, m, n+1)

BODY
#ifdef DPLASMA_EXECUTE
    if( uplo == PlasmaLower ) {
        CORE_dgemm( PlasmaNoTrans, PlasmaTrans,
                    NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    NB, /*A.nb,*/
                    -1.0, A(m, n), NB, /*A.nb,*/
                          A(k, n), NB, /*A.nb,*/
                     1.0, A(m, k), NB /*A.nb*/);
    } else {
        CORE_dgemm( PlasmaTrans, PlasmaNoTrans,
                    NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                    NB, /*A.nb,*/
                    NB, /*A.nb,*/
                    -1.0, A(n, k), NB, /*A.nb,*/
                          A(n, m), NB, /*A.nb,*/
                     1.0, A(k, m), NB /*A.nb*/);
    }
#else
    if( uplo == PlasmaLower ) {
        OUTPUT(("CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaNoTrans", "PlasmaTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, m, n, NB, /*A.nb,*/
                      k, n, NB, /*A.nb,*/
                 1.0, m, k, NB /*A.nb*/));
    } else {
        OUTPUT(("CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                "PlasmaTrans", "PlasmaNoTrans",
                NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
                NB, /*A.nb,*/
                NB, /*A.nb,*/
                -1.0, n, k, NB, /*A.nb,*/
                      n, m, NB, /*A.nb,*/
                 1.0, k, m, NB /*A.nb*/));
    }
#endif  /* DPLASMA_EXECUTE */
END
