extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> c d s
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"

%}

/*
 * Globals
 */
type   [type = "PLASMA_enum"]
alpha  [type = "dague_complex64_t"]
dataA  [type = "dague_ddesc_t *"]
descA  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]

plasma_upper   [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower   [type="PLASMA_enum" hidden=on default=PlasmaLower ]

LASCAL_L(m, n)  [profile = off]

// Execution space
m = 1 .. ((type == plasma_upper) ? 0 : descA.mt-1)
n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )

// Parallel partitioning
: dataA(m, n)

// Parameters

RW A <- dataA(m, n)
     -> dataA(m, n)
BODY
{
    int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
    int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
    int ldam = BLKLDD( descA, m );

#if !defined(DAGUE_DRY_RUN)
    int i;
    for(i=0; i<tempnn; i++)
        cblas_zscal( tempmm, CBLAS_SADDR(alpha), A+i*ldam, 1 );
#endif

    printlog("lascal_l( %d, %d )\n"
             "    ( %e, %d, %d, dataA(%d,%d)[%p], %d)\n",
             m, n, creal(alpha), tempmm, tempnn,
             m, n, A, ldam);
}
END

LASCAL_U(m, n)  [profile = off]

// Execution space
m = 0   .. descA.mt-1
n = m+1 .. ((type == plasma_lower) ? 0 : descA.nt-1)

// Parallel partitioning
: dataA(m, n)

// Parameters

RW   A <- dataA(m, n)
       -> dataA(m, n)
BODY
{
    int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
    int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
    int ldam = BLKLDD( descA, m );

#if !defined(DAGUE_DRY_RUN)
    int i;
    for(i=0; i<tempnn; i++)
        cblas_zscal( tempmm, CBLAS_SADDR(alpha), A+i*ldam, 1 );
#endif

    printlog("lascal_u( %d, %d )\n"
             "    ( %e, %d, %d, dataA(%d,%d)[%p], %d)\n",
             m, n, creal(alpha), tempmm, tempnn,
             m, n, A, ldam);
}
END

LASCAL_DIAG(k)  [profile = off]

// Execution space
     k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )

// Parallel partitioning
: dataA(k, k)

// Parameters

RW   A <- dataA(k, k)
       -> dataA(k, k)
BODY
{
  int tempkm = ((k)==((descA.mt)-1)) ? ((descA.m)-(k*(descA.mb))) : (descA.mb);
  int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
  int ldak = BLKLDD( descA, k );

#if !defined(DAGUE_DRY_RUN)
  int i;
  switch ( type ) {
  case PlasmaUpper:
      for(i=0; i<tempkn; i++) {
          cblas_zscal( dague_imin( i+1, tempkm ), CBLAS_SADDR(alpha), A+i*ldak, 1 );
      }
      break;

  case PlasmaLower:
      for(i=0; i<tempkn; i++) {
          cblas_zscal( dague_imax( tempkm, tempkm-i ), CBLAS_SADDR(alpha), A+i*ldak, 1 );
      }
      break;
  default:
      for(i=0; i<tempkn; i++) {
          cblas_zscal( tempkm, CBLAS_SADDR(alpha), A+i*ldak, 1 );
      }
      break;
  }
#endif

  printlog("lascal_diag( %d, %d )\n"
           "    ( %e, %d, %d, dataA(%d,%d)[%p], %d)\n",
           k, k, creal(alpha), tempkm, tempkn,
           k, k, A, ldak);
}
END

extern "C" %{

%}
