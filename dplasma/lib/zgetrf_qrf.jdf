extern "C" %{
/*
 *  Copyright (c) 2012
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include "dague.h"
#include <math.h>
#include <plasma.h>
#include <core_blas.h>

#include <lapacke.h>

#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma_qr_pivgen.h"
#include "dplasma/cores/dplasma_zcores.h"

PLASMA_desc plasma_desc_init(PLASMA_enum dtyp, int mb, int nb, int bsiz,
                             int lm, int ln, int i, int j, int m, int n);

int dague_log2(int n) {
    int i;
    if (n == 0) return 0;
    for(i=-1; n>0; i++)
        n = n >> 1;
    return i;
}

%}

A       [type = "dague_ddesc_t *"]
IPIV    [type = "dague_ddesc_t *" aligned=A]
TS      [type = "dague_ddesc_t *" aligned=A]
TT      [type = "dague_ddesc_t *" aligned=A]
lu_tab  [type = "int*"]
pivfct  [type = "qr_piv_t*"]
ib      [type = "int"]
W       [type = "double *"]
p_work  [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descTS.nb))"]
p_tau   [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(descTS.nb))"]
INFO    [type = "int*"]

descA   [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)A)"  hidden=on]
descTS  [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)TS)" hidden=on]
descTT  [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)TT)" hidden=on]

param_p [type = int default="((two_dim_block_cyclic_t*)A)->grid.rows" hidden=on ]
param_q [type = int default="((two_dim_block_cyclic_t*)A)->grid.cols" hidden=on ]
minMNT  [type = int default="dague_imin( descA.mt-1, descA.nt-1 )"    hidden=on ]

/*===========================================================================================

                                       LU PART

===========================================================================================*/

/********************************************************************************************
 *
 *                                   GETRF kernel
 *
 * There are dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) getrf applyed at step
 * k on the block of rows indexed from m to m + s * param_p with a step of param_p. (1<=s<=param_a)
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA.mt if the row m is never used as a killer.
 *
 ********************************************************************************************/

zgetrf(k)
  /* Execution space */
  k = 0 .. minMNT

  : A(k, k)

  RW    A    <- A selector(k,k,k)
             -> A(k, k)
             -> A zgetrf_typechange(k)
             -> (k < descA.nt-1) ? A  swptrsm_u(k, (k+1)..(descA.nt-1))     [type = LOWER_TILE]

  RW    IP   <- IP selector(k,k,k)                                          [type = PIVOT]
             -> IPIV(k, k)                                                  [type = PIVOT]
             -> (k < descA.nt-1) ? IP swptrsm_u(k, (k+1)..(descA.nt-1))     [type = PIVOT]

; descA.nt-k-1
BODY
{
    /* Nothing (LU factorization already done by lu_facto)*/
    printlog("zgetrf( k=%d )\n", k);
}
END


zgetrf_typechange(k) [profile = off]
  /* Execution space */
  k = 0 .. minMNT

  : A(k, k)

  RW A <- A zgetrf(k)
    -> ( k < (descA.mt-1) ) ? A ztrsm_l(k, k+1..descA.mt-1)       /* [type = UPPER_TILE]*/

; descA.nt-k-1
BODY
{
    /* Nothing */
    printlog("zgetrf_typechange(k=%d)\n", k);
}
END


/********************************************************************************************
 *
 *                               SWAP + TRSM
 *
 ********************************************************************************************/

swptrsm_u(k, n)
  /* Execution space */
  k = 0   .. minMNT
  n = k+1 .. descA.nt-1

  /* Locality */
  : A(k, n)

  READ  A    <- A  zgetrf(k)                                       [type = LOWER_TILE]
  READ  IP   <- IP zgetrf(k)                                       [type = PIVOT]
  RW    C    <- A selector(k, k, n)
             -> A(k, n)
             -> ( k < (descA.mt-1) ) ? V zgemm(k, (k+1)..(descA.mt-1), n)

  CTL   ctl  <- ( k > 0 ) ? ctl tile2panel(k-1, n)

  /* Priority */
  ;descA.nt-n-1

BODY
{
    int s  = (descA.mt-k+param_p-1) / param_p;
    int ks = k + (s-1)*param_p;
    int tempkm = (k == (descA.mt-1)) ? (descA.m - k * descA.mb) : descA.mb;
    int tempnn = (n == (descA.nt-1)) ? (descA.n - n * descA.nb) : descA.nb;
    int tempm  = (s-1) * descA.mb +
        (( ks == descA.mt-1 ) ? descA.m - ks * descA.mb : descA.mb);
    int ldak = BLKLDD(descA, k);

    printlog("swptrsm_u( k=%d, n=%d )", k, n );

    DRYRUN(

        PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                               descA.mb, descA.nb, descA.mb * descA.nb,
                                               s*descA.mb, descA.nb, 0, 0,
                                               tempm, tempnn );
        pdescA.mat = (void*)C;

        CORE_zlaswp_ontile( pdescA, 1, tempkm, IP, 1 );

        CORE_ztrsm(
            PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit,
            tempkm, tempnn,
            1., A /*A(m, k)*/, ldak,
                C /*A(m, n)*/, ldak);
           );
}
END


/********************************************************************************************
 *
 *                                 TRSM kernel
 *
 ********************************************************************************************/

ztrsm_l(k, m)
  /* Execution space */
  k = 0   .. minMNT
  m = k+1 .. descA.mt-1

  type = inline_c %{ return ((m-k)%param_p == 0) ? 0 : 1; %}

  : A(m, k)

  READ A  <- A zgetrf_typechange(k)                                     [type = UPPER_TILE]

  RW   C  <- A selector(k, m, k)
          -> A(m, k)
          -> ( k < (descA.nt-1) ) ? H zgemm(k, m, (k+1)..(descA.nt-1))

; descA.nt-k-1
BODY
{
    int tempmm = (m == (descA.mt-1)) ? (descA.m - m * descA.mb) : (descA.mb);
    int tempkm = (k == (descA.mt-1)) ? (descA.m - k * descA.mb) : (descA.mb);
    int ldam = BLKLDD( descA, m );
    int ldak = BLKLDD( descA, k );

    printlog("CORE_trsm_L(k=%d,m=%d,ldk=%d,ldm=%d,A(%d,%d))\n",
             tempkm, tempmm, ldak, ldam, m, k);

    DRYRUN(
         if ( type == 0 ) {
             /* TRSM already applied by GETRF */
         } else {
            CORE_ztrsm(
                PlasmaRight, PlasmaUpper, PlasmaNoTrans, PlasmaNonUnit,
                tempmm,
                tempkm,
                1.0, A /*A(k, k)*/, ldak,
                     C /*A(m, k)*/, ldam );
         }
           );
}
END



/********************************************************************************************
 *
 *                                 GEMM kernel
 *
 ********************************************************************************************/

zgemm(k, m, n)
  /* Execution space */
  k = 0   .. minMNT
  m = k+1 .. descA.mt-1
  n = k+1 .. descA.nt-1

  diagdom = inline_c %{ return ((m-k-1)%param_p == 0) ? 0 : 1; %}

  : A(m, n)

  READ H   <- C ztrsm_l(k, m)
  READ V   <- C swptrsm_u(k, n)

  RW   C   <- A selector(k, m, n)
           -> (n == k+1) ? A copypanel(k+1, m) : A selector(k+1, m, n)

  CTL  ctl -> ( (diagdom == 0) && (n > k+1) ) ? ctl tile2panel(k, n)

; descA.nt-n-1

BODY
{
    int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
    int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
    int ldam = BLKLDD( descA, m );
    int ldak = BLKLDD( descA, k );

    printlog("zgemm( k=%d, m=%d, n=%d)\n", k, m, n);

    DRYRUN(
        CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
                   tempmm, tempnn, descA.mb,
                   -1., H /*(m, k)*/, ldam,
                        V /*(k, n)*/, ldak,
                   1.,  C /*(m, n)*/, ldam );
           );
}
END


/*==========================================================================================

                                   QR PART

===========================================================================================*/

/*****************************************************************************************
 * GEQRT kernel
 *
 * There are dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) geqrt applyed at step
 * k on the rows indexed by m.
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA.mt if the row m is never used as a killer.
 *
 *****************************************************************************************/
zgeqrt(k, i)
  /* Execution space */
  k = 0 .. minMNT
  i = 0 .. inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}

  m     = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}
  nextm = inline_c %{ return dplasma_qr_nextpiv( pivfct, m, k, descA.mt); %}

  SIMCOST 4

  : A(m, k)

  RW    A <- A selector(k, m, k )
          -> A zgeqrt_typechange(k, i)
          ->  (k == descA.mt-1) ? A(m, k)                                    /*[type = UPPER_TILE]*/
          -> ((k <  descA.mt-1) & (nextm != descA.mt)) ? A1 zttqrt(k, nextm) /*[type = UPPER_TILE]*/
          -> ((k <  descA.mt-1) & (nextm == descA.mt)) ? A2 zttqrt(k, m)     /*[type = UPPER_TILE]*/
  RW    T <- TS(m, k)                                                        [type = LITTLE_T]
          -> TS(m, k)                                                        [type = LITTLE_T]
          -> (descA.nt-1 > k) ? T zunmqr(k, i, (k+1)..(descA.nt-1))          [type = LITTLE_T]

  ; descA.nt-k-1

BODY
{
    int tempmm = (m==(descA.mt-1)) ? (descA.m - m * descA.mb) : descA.mb;
    int tempkn = (k==(descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int ldam   = BLKLDD( descA, m );

    printlog("zgeqrt( k=%d, i=%d)\n", k, i);

    DRYRUN(
        void *p_elem_A = dague_private_memory_pop( p_tau  );
        void *p_elem_B = dague_private_memory_pop( p_work );

        CORE_zgeqrt(tempmm, tempkn, ib,
                    A /* A(m,k) */, ldam,
                    T /* T(m,k) */, descTS.mb,
                    p_elem_A, p_elem_B );

        dague_private_memory_push( p_tau, p_elem_A );
        dague_private_memory_push( p_work, p_elem_B );

           );

#if defined(DAGUE_SIM)
    if ( descA.mt-1 == k )
        ((PLASMA_Complex64_t*)A)[0] = (PLASMA_Complex64_t)(this_task->sim_exec_date);
#endif
    printlog("CORE_zgeqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTS.mb, p_elem_A, p_elem_B)",
             k, m, m, k, A, m, k, T);
}
END


zgeqrt_typechange(k, i) [profile = off]
  /* Execution space */
  k = 0 .. minMNT
  i = 0 .. inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}

  m = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}

  : A(m, k)

  RW A <- A zgeqrt(k, i)
       -> ( descA.nt-1 > k ) ? A zunmqr(k, i, (k+1)..(descA.nt-1)) [type = LOWER_TILE]
       /*       -> A(m, k)                                                  [type = LOWER_TILE]*/
BODY
{
    /* Nothing */
}
END


/*
 * UNMQR (see GEQRT)
 */
zunmqr(k, i, n)

  /* Execution space */
  k = 0   .. minMNT
  i = 0   .. inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}
  n = k+1 .. descA.nt-1

  m     = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}
  nextm = inline_c %{ return dplasma_qr_nextpiv( pivfct, m, k, descA.mt); %}

  SIMCOST 6

  : A(m, n)

  READ  A <- A zgeqrt_typechange(k, i)                              [type = LOWER_TILE]
  READ  T <- T zgeqrt(k, i)                                         [type = LITTLE_T]
  RW    C <- A selector(k, m, n)
          -> ( k == descA.mt-1 ) ? A(m, n)
          -> ( (k < descA.mt-1) & (nextm != descA.mt) ) ? A1 zttmqr(k, nextm, n)
          -> ( (k < descA.mt-1) & (nextm == descA.mt) ) ? A2 zttmqr(k, m,     n)

  ; descA.nt-n-1

BODY
{
    DRYRUN(
        void *p_elem_A = dague_private_memory_pop( p_work );
        int tempkn = (k == (descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
        int tempmm = (m == (descA.mt-1)) ? (descA.m - m * descA.mb) : descA.mb;
        int tempnn = (n == (descA.nt-1)) ? (descA.n - n * descA.nb) : descA.nb;
        int ldam   = BLKLDD( descA, m );

        CORE_zunmqr(
            PlasmaLeft, PlasmaConjTrans,
            tempmm, tempnn, dague_imin(tempmm, tempkn), ib,
            A /* A(m, k) */, ldam,
            T /* T(m, k) */, descTS.mb,
            C /* A(m, n) */, ldam,
            p_elem_A, descTS.nb );

        dague_private_memory_push( p_work, p_elem_A );
           );

    printlog("CORE_zunmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, tempmm, tempnn, min(tempmm, tempnn), ib, \n"
             "\t A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTS.mb, A(%d,%d)[%p], ldam, p_elem_A, descTS.nb)",
             k, m, n, m, k, A, m, k, T, m, n, C);
}
END

/******************************************************************************************
 * TTQRT kernel
 *
 * The row p kills the row m.
 * nextp is the row that will be killed by p at next stage of the reduction.
 * prevp is the row that has been killed by p at the previous stage of the reduction.
 * prevm is the row that has been killed by m at the previous stage of the reduction.
 * type defines the operation to perform: TS if 0, TT otherwise
 * ip is the index of the killer p in the sorted set of killers for the step k.
 * im is the index of the killer m in the sorted set of killers for the step k.
 *
 *****************************************************************************************/

zttqrt(k, m)
  /* Execution space */
  k = 0   .. minMNT
  m = k+1 .. descA.mt-1

  p =     inline_c %{ return dplasma_qr_currpiv(pivfct, m, k); %}
  nextp = inline_c %{ return dplasma_qr_nextpiv(pivfct, p, k, m); %}
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, p, k, m); %}
  prevm = inline_c %{ return dplasma_qr_prevpiv(pivfct, m, k, m); %}
  type  = inline_c %{ return dplasma_qr_gettype(pivfct, k, m ); %}
  ip    = inline_c %{ return dplasma_qr_geti(   pivfct, k, p ); %}
  im    = inline_c %{ return dplasma_qr_geti(   pivfct, k, m ); %}

  SIMCOST inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? 6 : 2; %}

  : A(m, k)

  RW   A1 <- (   prevp == descA.mt ) ? A  zgeqrt(k, ip ) : A1 zttqrt(k, prevp ) /*[type = UPPER_TILE]*/
          -> (   nextp != descA.mt ) ? A1 zttqrt(k, nextp )                     /*[type = UPPER_TILE]*/
          -> ( ( nextp == descA.mt ) & (p == k) ) ? A zttqrt_out_A1(k)          /*[type = UPPER_TILE]*/
          -> ( ( nextp == descA.mt ) & (p != k) ) ? A2 zttqrt(k, p)             /*[type = UPPER_TILE]*/
  RW   A2 <- (type == 0)                             ? A selector(k, m, k )     /* type 0 = DPLASMA_QR_KILLED_BY_TS */
          <- ( (type != 0) && (prevm == descA.mt ) ) ? A zgeqrt(k, im )         /* type 0 = DPLASMA_QR_KILLED_BY_TS */
          <- ( (type != 0) && (prevm != descA.mt ) ) ? A1 zttqrt(k, prevm )     /* type 0 = DPLASMA_QR_KILLED_BY_TS */
          -> A(m, k)
          -> (descA.nt-1 > k)? V zttmqr(k, m, (k+1)..(descA.nt-1))
  RW   T  <- TT(m, k)                                              [type = LITTLE_T]
          -> TT(m, k)                                              [type = LITTLE_T]
          -> (descA.nt-1 > k)? T zttmqr(k, m, (k+1)..(descA.nt-1)) [type = LITTLE_T]

 ; descA.nt-k-1

BODY
{
    int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
    int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
    int ldap = BLKLDD( descA, p );
    int ldam = BLKLDD( descA, m );

    DRYRUN(
        void *p_elem_A = dague_private_memory_pop( p_tau  );
        void *p_elem_B = dague_private_memory_pop( p_work );

        if ( type == DPLASMA_QR_KILLED_BY_TS ) {
            CORE_ztsqrt(
                tempmm, tempkn, ib,
                A1 /* A(p, k) */, ldap,
                A2 /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_A, p_elem_B );
        } else {
            CORE_zttqrt(
                tempmm, tempkn, ib,
                A1 /* A(p, k) */, ldap,
                A2 /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_A, p_elem_B );
        }
        dague_private_memory_push( p_tau , p_elem_A );
        dague_private_memory_push( p_work, p_elem_B );

           );

#if defined(DAGUE_SIM)
    ((PLASMA_Complex64_t*)A2)[0] = (PLASMA_Complex64_t)(this_task->sim_exec_date);
    if ( ( ( nextp == descA.mt ) & (p == k) ) )
        ((PLASMA_Complex64_t*)A1)[0] = (PLASMA_Complex64_t)(this_task->sim_exec_date);
#endif
    printlog("CORE_zttqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTT.mb, p_elem_A, p_elem_B)",
             k, m, p, k, A1, m, k, A2, m, k, T);
}
END

zttqrt_out_A1(k) [profile = off]
  k = 0 .. ( (descA.mt <= descA.nt) ? descA.mt-2 : descA.nt-1 )
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, k, k, k); %}

  : A(k, k)

  RW A <- A1 zttqrt( k, prevp ) /*[type = UPPER_TILE]*/
       -> A(k, k)               /*[type = UPPER_TILE]*/
BODY
/* nothing */
END

/***********************************************************************************************
 * TTMQR kernel (see TTQRT)
 *
 * type1 defines the operations to perfom at next step k+1 on the row m
 *   if type1 == 0, it will be a TS so the tile goes to a TTQRT/TTMQR operation
 *   if type1 != 0, it will be a TT so the tile goes to a GEQRT/UNMQR operation
 * im1 is the index of the killer m at the next step k+1 if its type is !0, descA.mt otherwise
 *
 **********************************************************************************************/

zttmqr(k, m, n)
  /* Execution space */
  k = 0   .. minMNT
  m = k+1 .. descA.mt-1
  n = k+1 .. descA.nt-1

  p =     inline_c %{ return dplasma_qr_currpiv(pivfct, m, k); %}
  nextp = inline_c %{ return dplasma_qr_nextpiv(pivfct, p, k, m); %}
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, p, k, m); %}
  prevm = inline_c %{ return dplasma_qr_prevpiv(pivfct, m, k, m); %}
  type  = inline_c %{ return dplasma_qr_gettype(pivfct, k,   m ); %}
  type1 = inline_c %{ return dplasma_qr_gettype(pivfct, k+1, m ); %}
  ip    = inline_c %{ return dplasma_qr_geti(   pivfct, k,   p ); %}
  im    = inline_c %{ return dplasma_qr_geti(   pivfct, k,   m ); %}
  im1   = inline_c %{ return dplasma_qr_geti(   pivfct, k+1, m ); %}
  diagdom = inline_c %{ return ((m-k-1)%param_p == 0) ? 0 : 1; %}

  SIMCOST inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? 12 : 6; %}

  : A(m, n)

  RW   A1 <-  (prevp == descA.mt) ? C zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n )

          ->  (nextp != descA.mt) ?                A1 zttmqr( k, nextp, n)
          -> ((nextp == descA.mt) & ( p == k ) ) ? A  zttmqr_out_A1(p, n)
          -> ((nextp == descA.mt) & ( p != k ) ) ? A2 zttmqr( k, p, n )

  RW   A2 <-  (type == 0 )                           ? A selector(k, m, n )      /* type 0 = DPLASMA_QR_KILLED_BY_TS */
          <- ((type != 0 ) && (prevm == descA.mt ) ) ? C  zunmqr(k, im, n)       /* type 0 = DPLASMA_QR_KILLED_BY_TS */
          <- ((type != 0 ) && (prevm != descA.mt ) ) ? A1 zttmqr(k, prevm, n )   /* type 0 = DPLASMA_QR_KILLED_BY_TS */

          -> (n == k+1) ? A copypanel(k+1, m) : A selector(k+1, m, n)

  READ  V <- A2 zttqrt(k, m)
  READ  T <- T  zttqrt(k, m) [type = LITTLE_T]

  CTL  ctl -> ( (diagdom == 0) && (n > k+1) ) ? ctl tile2panel(k, n)

    ; descA.nt-n-1

BODY
{
    int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
    int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
    int ldap = BLKLDD( descA, p );
    int ldam = BLKLDD( descA, m );
    int ldwork = ib;

    DRYRUN(
        void *p_elem_A = dague_private_memory_pop( p_work );

        if ( type == DPLASMA_QR_KILLED_BY_TS ) {
            CORE_ztsmqr(
                PlasmaLeft, PlasmaConjTrans,
                descA.mb, tempnn, tempmm, tempnn, descA.nb, ib,
                A1 /* A(p, n) */, ldap,
                A2 /* A(m, n) */, ldam,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_A, ldwork );
        } else {
            CORE_zttmqr(
                PlasmaLeft, PlasmaConjTrans,
                descA.mb, tempnn, tempmm, tempnn, descA.nb, ib,
                A1 /* A(p, n) */, ldap,
                A2 /* A(m, n) */, ldam,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_A, ldwork );
        }
        dague_private_memory_push( p_work, p_elem_A );

           );

    printlog("CORE_zttmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, \n"
             "\t A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTT.mb, p_elem_A, ldwork)",
             k, m, n, p, n, A1, m, n, A2, m, k, V, m, k, T);
}
END

zttmqr_out_A1(k, n) [profile = off]
  k = 0   .. minMNT-1
  n = k+1 .. descA.nt-1
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, k, k, k); %}

  : A(k, n)

  RW A <- A1 zttmqr( k, prevp, n )
       -> A(k, n)
BODY
/* nothing */
END

/*==========================================================================================

                                   CHOICE PART

===========================================================================================*/

/************************************************************************************
 *                      Tile 2 panel (Forward)                                      *
 *         Insure that step k on panel n is done before to start step k+1           *
 ************************************************************************************/

tile2panel(k, n) [ profile = off ]
  k = 0   .. minMNT-1
  n = k+2 .. descA.nt-1

  did_lu = inline_c %{ return lu_tab[k];   %}
  do_lu  = inline_c %{ return lu_tab[k+1]; %}
  q      = inline_c %{ return (n-k)%param_q; %}
  hmax   = inline_c %{ return dague_log2( dague_imin(param_p, descA.mt-k )-1 ); %}

  :A(k+1, n)

  CTL ctl2  <- (q == 0) ? ctl2 setchoice(k+1, 0, hmax)
            <- (q != 0) ? ctl2 setchoice_update(k+1, 0, q)
  CTL  ctl  <- (did_lu == 1) ? ctl  zgemm(k, k+1..descA.mt-1..param_p, n)
            <- (did_lu != 1) ? ctl zttmqr(k, k+1..descA.mt-1..param_p, n)
            /* Protect step k+1 */
            -> (do_lu == 1) ? ctl swptrsm_u(k+1, n)

  ;descA.nt-n-1

BODY
{
    printlog("tile2panel( k = %d, n = %d )\n", k, n );
}
END



copypanel(k, m) [ profile = off ]
  k = 0 .. minMNT
  m = k .. descA.mt-1

  did_lu  = inline_c %{ return ( k > 0 ) ? lu_tab[k-1] : -1; %}
  diagdom = inline_c %{ return (m-k)%param_p; %}

  :A(m, k)

  RW   A     <- (k == 0) ? A(m, k)
             <- (k >  0) && (did_lu == 1) ? C  zgemm( k-1,m,k)
             <- (k >  0) && (did_lu != 1) ? A2 zttmqr(k-1,m,k)
             -> (m == k) ? A zlufacto(k)
             -> (m != k) ? A selector(k, m, k)

  WRITE Acpy -> (diagdom == 0) ? Acpy selector(k, m, k)

  CTL  ctl   -> (diagdom == 0) ? ctl zlufacto(k)
             -> (diagdom != 0) ? ctl reduce_norm(k, diagdom)

  ;descA.nt-k-1

BODY
{
    int i = (m - k) / param_p;
    int tempmm = (m==(descA.mt-1)) ? (descA.m - m * descA.mb) : descA.mb;
    int tempkn = (k==(descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int ldam = BLKLDD( descA, m );

    printlog("copypanel( k=%d, m=%d )", k, m );

    DRYRUN(
        if (diagdom == 0) {
            /*The tiles of the first node have to be copied*/
            CORE_zlacpy(PlasmaUpperLower, tempmm, tempkn,
                        A,    ldam,
                        Acpy, descA.mb);

            printf("copypanel ( %d ) => copy\n", k);
        } else{
            /*We need the 1-norm of the other tiles*/
            W[i] = LAPACKE_zlange_work(
                LAPACK_COL_MAJOR, '1',
                tempmm, tempkn, A, ldam, NULL);

            printf("copypanel ( %d ) => norm\n", k);
        }
           );
}
END


zlufacto(k)
  /* Execution space */
  k = 0 .. minMNT

  : A(k, k)

  RW    A    <- A copypanel(k, k)
             -> A selector(k, k, k)

  RW    IP   <- IPIV(k, k)                       [type = PIVOT]
             -> IPIV(k, k)                       [type = PIVOT]
             -> IP selector(k, k, k)             [type = PIVOT]

  CTL   ctl  <- ctl copypanel(k, k..descA.mt-1..param_p)
             -> ctl reduce_norm(k, 0)

; descA.nt-k-1
BODY
{
    int s  = (descA.mt-k+param_p-1) / param_p;
    int ks = k + (s-1)*param_p;
    int tempm = (s-1) * descA.mb +
        (( ks == descA.mt-1 ) ? descA.m - ks * descA.mb : descA.mb);
    int tempkn = k == descA.nt-1 ? descA.n-k*descA.nb : descA.nb;
    int ldak = BLKLDD(descA, k);

    printlog("CORE_zgetrf_rec(%d)\n"
             "\t(%d, %d, A(%d,%d)[%p], IP(%d)[%p])",
             k, tempm, tempkn, k, k, A, k, IP);

    DRYRUN(
        int tempkm = k == descA.mt-1 ? tempm : descA.mb;
        //int nbthrd = nbthreads( k );
        int info[3];

        /* Set local IP to 0 before generation
         * Better here than a global initialization for locality
         * and it's also done in parallel */
        //if ( t == 0 ) {
            memset(IP, 0, dague_imin(tempkn, tempkm) * sizeof(int) );
            /*fprintf(stderr, "There are %d threads woking on it\n", nbthrd+1);*/
        //}

        info[1] = 0;
        info[2] = /*nbthrd+*/1;

        if ( descA.storage == matrix_Tile ) {
            PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                                   descA.mb, descA.nb, descA.mb * descA.nb,
                                                   s*descA.mb, descA.nb, 0, 0,
                                                   tempm, tempkn);
            pdescA.mat = A;
            CORE_zgetrf_rectil( pdescA, IP, info );

        } else {
            CORE_zgetrf_reclap(
                tempm, tempkn,
                A/*(k, k)*/, ldak, IP, info );
        }

        if ( /*(t == 0) && */(info[0] != PLASMA_SUCCESS) ) {
            *INFO = k * descA.mb + info[0]; /* Should return if enter here */
            fprintf(stderr, "zgetrf(%d) failed => %d\n", k, *INFO );
        }

        /*W[0] = condition number*/
           );
}
END

reduce_norm(k, p)
  k = 0 .. minMNT

  pmax = inline_c %{ return dague_imin(param_p, descA.mt-k); %}
  hmax = inline_c %{ return dague_log2( pmax-1 ); %}

  p = 0 .. pmax-1

  : A(k+p, k)

  WRITE W1 -> T setchoice(k, p,          0) [type = ELTdouble]
  WRITE W2 -> B setchoice(k, (p+1)%pmax, 0) [type = ELTdouble]

  CTL ctl <- (p == 0) ? ctl zlufacto(k)
          <- (p != 0) ? ctl copypanel(k, k+p..descA.mt-1..param_p)

BODY
{
    double *norm1 = (double*)W1;
    double *norm2 = (double*)W2;

    if (p == 0) {
        norm1[0] = W[0];
        norm1[1] = 0.;
        norm2[0] = W[0];
        norm2[1] = 0.;
    } else {
        int m, i;
        norm1[0] = 0.;
        norm1[1] = 0.;

        for(i=0, m=k+p; m<descA.mt; m+=param_p, i++) {
            norm1[1] += W[i];
        }
        norm2[0] = 0.;
        norm2[1] = norm1[1];
    }
}
END


setchoice(k, p, h)
  /* Execution space */
  k = 0 .. minMNT

  pmax = inline_c %{ return dague_imin(param_p, descA.mt-k); %}
  qmax = inline_c %{ return dague_imin(param_q, descA.nt-k); %}
  hmax = inline_c %{ return dague_log2( pmax-1 ); %}

  p = 0 .. pmax-1
  h = 0 .. hmax

  pui = inline_c %{ return 1 << h; %}

  : A(k+p, k)

        /* Local forward of T */
  RW T <- (h == 0) ? W1 reduce_norm(k, p)                       [type = ELTdouble]
       <- (h >  0) ? T setchoice(k, p, h-1)                     [type = ELTdouble]

       -> (h <  hmax) ? T setchoice(k, p, h+1)                  [type = ELTdouble]

        /* Send T to the bottom */
  RW B <- (h == 0) ? W2 reduce_norm(k, (pmax+p-pui)%pmax)       [type = ELTdouble]
       <- (h != 0) ? B setchoice(k, (pmax+p-pui)%pmax, h-1 )    [type = ELTdouble]

       -> (h <  hmax) ? B setchoice(k, (p+2*pui)%pmax, h+1)     [type = ELTdouble]

       /* Broadcast the information to the row */
       -> (h == hmax) ? B setchoice_update(k, p, 1..param_q-1)     [type = ELTdouble]

  /*
   * Release local choic
   */
  /* Free selctor from this step */
  CTL  ctl  -> (h == hmax) ? ctl selector(k, k+p..descA.mt-1..param_p, k..descA.nt-1..param_q)
  /* Free tile2panel from previous step */
  CTL  ctl2 -> (h == hmax) && (p == 0) && (k > 0) ? ctl2 tile2panel(k-1, k+param_q..descA.nt-1..param_q)

  ; descA.nt-k-1

BODY
{
    double *norm1 = (double*)T;
    double *norm2 = (double*)B;

    /* TODO: We collect the condition numbers and compute the choice*/
    printlog("setchoice( k=%d, p=%d, h=%d )\n", k, p, h);

    DRYRUN(
        /* The received buffer contains the diagonal line */
        if( (pui <= p) && (p < 2*pui) ) {
            norm2[0] = norm1[0];
        } else {
            norm1[0] = norm2[0];
        }

        norm1[1] += norm2[1];
        norm2[1] = norm1[1];
           );

    if (h == hmax) {
        int cond = 0;
        //cond = rand() % 2;

        if (cond == 1) {
            lu_tab[k] = 1;
            //fprintf(stderr, "lu_tab[k=%d] = %d \n", k, lu_tab[k] );
        }
            else {
                lu_tab[k] = 0;
                //fprintf(stderr, "lu_tab[k=%d] = %d \n", k, lu_tab[k] );
            }
    }

    norm2[0] = lu_tab[k];
}
END

setchoice_update(k, p, q)
  /* Execution space */
  k = 0 .. minMNT

  pmax = inline_c %{ return dague_imin(param_p, descA.mt-k)-1; %}

  p = 0 .. pmax
  q = 1 .. param_q-1

  hmax = inline_c %{ return dague_log2( pmax ); %}

  : A(k+p, k+q)

  RW B <- B setchoice(k, p, hmax)   [type = ELTdouble]

  /*
   * Release local choice
   */
  /* Free selctor from this step */
  CTL  ctl  -> ctl selector(k, k+p..descA.mt-1..param_p, k+q..descA.nt-1..param_q)
  /* Free tile2panel from previous step */
  CTL  ctl2 -> (p == 0) && (k > 0) ? ctl2 tile2panel(k-1, k+q..descA.nt-1..param_q)

  ; descA.nt-k-1

BODY
{
    /* TODO: We collect the condition numbers and compute the choice*/
    printlog("setchoice( k=%d )\n", k);

    double *norm2 = (double*)B;
    lu_tab[k] = norm2[0];
}
END


selector(k,m,n)
  /* Execution space */
  k = 0 .. minMNT
  m = k .. descA.mt-1
  n = k .. descA.nt-1

  i      = inline_c %{ return dplasma_qr_geti(    pivfct, k,   m ); %}
  type   = inline_c %{ return dplasma_qr_gettype( pivfct, k,   m ); %}
  did_lu = inline_c %{ return (k == 0) ? -1 : lu_tab[k-1]; %}
  do_lu  = inline_c %{ return lu_tab[k]; %}
  diagdom = inline_c %{ return ((m-k)%param_p == 0) && (n == k) ? 0 : 1; %}

  p    = inline_c %{ return (m-k)%param_p; %}
  q    = inline_c %{ return (n-k)%param_q; %}
  hmax = inline_c %{ return dague_log2( dague_imin(param_p, descA.mt-k)-1 ); %}

  : A(m,n)

  RW   A   <-   ((k == n) && (k == m)) ? A zlufacto(k)
           <-   ((k == n) && (k != m)) ? A copypanel(k, m)
           <-   ((k != n) && (k == 0)) ? A(m, n)
           <-   ((k != n) && (k != 0) && (did_lu == 1)) ? C  zgemm( k-1,m,n)
           <-   ((k != n) && (k != 0) && (did_lu != 1)) ? A2 zttmqr(k-1,m,n)
           /* LU */
           -> ( (do_lu == 1) && (k == n) && (k == m) ) ? A zgetrf(k)
           -> ( (do_lu == 1) && (k == n) && (k != m) ) ? C ztrsm_l(k,m)
           -> ( (do_lu == 1) && (k != n) && (k == m) ) ? C swptrsm_u(k,n)
           -> ( (do_lu == 1) && (k != n) && (k != m) ) ? C zgemm(k,m,n)
           /* QR */
           -> ( (do_lu != 1) && (k == n) && (type != 0) ) ? A  zgeqrt(k,i)
           -> ( (do_lu != 1) && (k == n) && (type == 0) ) ? A2 zttqrt(k,m)
           -> ( (do_lu != 1) && (k != n) && (type != 0) ) ? C  zunmqr(k,i,n)
           -> ( (do_lu != 1) && (k != n) && (type == 0) ) ? A2 zttmqr(k,m,n)

  RW   IP  <- ((k == m) && (k == n)) ? IP zlufacto(k)
           <- ((k != m) || (k != n)) ? IPIV(m,n) /* unused */
           -> ((m == k) && (n == k) && (do_lu == 1) ) ? IP zgetrf(k)

  READ Acpy <- (diagdom == 0) ? Acpy copypanel(k, m) : A(m, n)
            <- (diagdom != 0) ? A(m, n) /* Unused */

  CTL  ctl  <- (q == 0) ? ctl setchoice(k, p, hmax)
            <- (q != 0) ? ctl setchoice_update(k, p, q)

  ; descA.nt-k-1
BODY
{
    /* Nothing */
    printlog("selector( k=%d, m=%d, n=%d) type=%d, didlu=%d, dolu=%d",
             k, m, n, type, did_lu, do_lu);

    DRYRUN(
        if( do_lu != 1 && diagdom == 0) {
            int tempmm = (m==(descA.mt-1)) ? (descA.m - m * descA.mb) : descA.mb;
            int tempkn = (k==(descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
            int ldam = BLKLDD( descA, m );

            CORE_zlacpy(PlasmaUpperLower, tempmm, tempkn,
                        Acpy, descA.mb,
                        A,    ldam);
        }
           );

    if((m >= descA.mt-param_p) && (n >= descA.nt-param_q)) {
        int nb_tasks = 0;
        if (do_lu == 1) {
            /* geqrt + geqrt_typechange + unmqr */
            {
                int nbgeqrt_total = dplasma_qr_getnbgeqrf( pivfct, k, descA.mt );
                int geqrt_i;
                int unmqr_n;

                for(geqrt_i=0; geqrt_i < nbgeqrt_total; geqrt_i++) {
                    int geqrt_m = dplasma_qr_getm(pivfct, k, geqrt_i);

                    if (zgeqrt_pred(k, geqrt_i, geqrt_m, -1))
                        nb_tasks += 2;

                    for(unmqr_n=k+1; unmqr_n<descA.nt; unmqr_n++) {
                        if (zunmqr_pred(k, geqrt_i, unmqr_n, geqrt_m, -1)) {
                            nb_tasks++;
                        }
                    }
                }
            }

            /* ttqrt + ttmqr */
            {
                int ttqrt_m, ttmqr_n;

                for(ttqrt_m=k+1; ttqrt_m < descA.mt; ttqrt_m++) {

                    if (zttqrt_pred(k, ttqrt_m, -1, -1, -1, -1, -1, -1, -1)) {
                        nb_tasks++;
                    }

                    for(ttmqr_n=k+1; ttmqr_n<descA.nt; ttmqr_n++) {
                        if (zttmqr_pred(k, ttqrt_m, ttmqr_n, -1, -1, -1, -1,
                                        -1, -1, -1, -1, -1, -1)) {
                            nb_tasks++;
                        }
                    }
                }
            }

            /* ttqrt_out + ttmqr_out */
            {
                if ( k < minMNT ) {
                    int ttmqr_n;

                    if (zttqrt_out_A1_pred(k, -1)) {
                        nb_tasks++;
                    }

                    for(ttmqr_n=k+1; ttmqr_n<descA.nt; ttmqr_n++) {
                        if (zttmqr_out_A1_pred(k, ttmqr_n, -1)) {
                            nb_tasks++;
                        }
                    }
                }
                if ( descA.mt > descA.nt && k > descA.nt ) {
                    if (zttqrt_out_A1_pred(k, -1)) {
                        nb_tasks++;
                    }
                }
            }

        } else {
            /*
             * LU
             */
            int getrf_m, getrf_n;

            if (zgetrf_pred(k))
                nb_tasks += 2;

            for(getrf_n=k+1; getrf_n< descA.nt; getrf_n++) {
                if (swptrsm_u_pred(k, getrf_n))
                    nb_tasks++;
            }

            for(getrf_m=k+1; getrf_m< descA.mt; getrf_m++) {
                if (ztrsm_l_pred(k, getrf_m, 0))
                    nb_tasks++;

                for(getrf_n=k+1; getrf_n< descA.nt; getrf_n++) {
                    if (zgemm_pred(k, getrf_m, getrf_n, 0))
                        nb_tasks++;
                }
            }
        }

        dague_object_dec_nbtask( this_task->dague_object, nb_tasks );
    }
}
END
