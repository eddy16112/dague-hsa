extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "dplasmajdf.h"
%}

/*
 * Globals
 */
transA [int]
transB [int]

alpha  [Dague_Complex64_t]
beta   [Dague_Complex64_t]

Am   [int]
An   [int]
Amb  [int]
Anb  [int]
Amt  [int]
Ant  [int]

Bm   [int]
Bn   [int]
Bmb  [int]
Bnb  [int]
Bmt  [int]
Bnt  [int]

Cm   [int]
Cn   [int]
Cmb  [int]
Cnb  [int]
Cmt  [int]
Cnt  [int]

/* A(M, K) * B(K, N) = C(M, N) */
/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(k, m)

k = 0 .. Amt-1
m = 0 .. Ant-1

: A(k, m)

A <- A(k, m)
  -> A GEMM(m, 0, k)
BODY
    printlog("rank %d <- A(%d,%d)\n", __dague_object->super.A->myrank, k, m);
END

/**************************************************
 *                       READ_B                   *
 **************************************************/
READ_B(n, k)

n = 0 .. Bmt-1
k = 0 .. Bnt-1

: B(n, k)

B <- B(n, k)
  -> B GEMM(0, n, k)
BODY
     printlog("rank %d <- B(%d,%d)\n", __dague_object->super.B->myrank, n, k);
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(m, n, k)

// Execution space
m = 0 .. Cmt-1
n = 0 .. Cnt-1
k = 0 .. Amt-1

// Parallel partitioning
: C(m, n)

// Parameters
READ A <- (n == 0)       ? A READ_A(k, m) : A GEMM( m, (n+Cnt-1) % Cnt, k )
       -> (n <= (Cnt-2)) ? A GEMM( m, (n+1) % Cnt, k )
READ B <- (m == 0)       ? B READ_B(n, k) : B GEMM( (m+Cmt-1) % Cmt, n, k )
       -> (m <= (Cmt-2)) ? B GEMM( (m+1) % Cmt, n, k )
RW   C <- (k == 0)       ? C(m, n) : C GEMM( m, n, k-1 )
       -> (k == (Amt-1)) ? C(m, n) : C GEMM( m, n, k+1 )
BODY
        Dague_Complex64_t lbeta = (k == 0) ? beta : 1.0;
        int tempmm = m == Cmt-1 ? Cm - m * Cmb : Cmb;
        int tempnn = n == Cnt-1 ? Cn - n * Cnb : Cnb;
        int tempkk = k == Amt-1 ? Am - k * Amb : Amb;
        DRYRUN(
            CORE_zgemm(
                transA, transB,
                tempmm, tempnn, tempkk,
                alpha, A /*A(m, k)*/, Amb,
                       B /*B(k, n)*/, Bmb,
                lbeta, C /*C(m, n)*/, Cmb);
            );

        printlog("thread %d gemm( %d, %d, %d )\n"
                 "    ( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
                 context->eu_id, m, n, k,
                 plasma_const( transA ), plasma_const( transB ), 
                 tempmm, tempnn, tempkk,
                 alpha, m, k, Amb,
                        k, n, Bmb,
                 beta,  m, n, Cmb );
END

extern "C" %{

%}
