extern "C" %{
/*
 *  Copyright (c) 2010-2013
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

#if defined(HAVE_CUDA)
#include <dague/devices/cuda/dev_cuda.h>
#include "dplasma/cores/cuda_zgemm.h"
extern int *gpu_counter;
#endif  /* defined(HAVE_CUDA) */
%}

/*
 * Globals
 */
transA [type = int]
transB [type = int]

alpha  [type = dague_complex64_t]
beta   [type = dague_complex64_t]

dataA  [type = "dague_ddesc_t *"]
descA  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
dataB  [type = "dague_ddesc_t *"]
descB  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataB)"]
dataC  [type = "dague_ddesc_t *"]
descC  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataC)"]

/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(k, m)  [profile = off]

k = 0 .. descA.mt-1
m = 0 .. descA.nt-1

: dataA(k, m)

READ A <- dataA(k, m)
       -> A GEMM(m, 0, k)
BODY
{
    printlog("rank %u <- A(%d,%d)\n", __dague_object->super.dataA->myrank, k, m);
}
END

/**************************************************
 *                       READ_B                   *
 **************************************************/
READ_B(n, k)  [profile = off]

n = 0 .. descB.mt-1
k = 0 .. descB.nt-1

: dataB(n, k)

READ B <- dataB(n, k)
       -> B GEMM(0, n, k)
BODY
{
     printlog("rank %u <- B(%d,%d)\n", __dague_object->super.dataB->myrank, n, k);
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(m, n, k)

// Execution space
m = 0 .. descC.mt-1
n = 0 .. descC.nt-1
k = 0 .. descA.mt-1

// Parallel partitioning
: dataC(m, n)

// Parameters
READ A <- (n == 0)            ? A READ_A(k, m) : A GEMM( m, (n+descC.nt-1) % descC.nt, k )
       -> (n <= (descC.nt-2)) ? A GEMM( m, (n+1) % descC.nt, k )
READ B <- (m == 0)            ? B READ_B(n, k) : B GEMM( (m+descC.mt-1) % descC.mt, n, k )
       -> (m <= (descC.mt-2)) ? B GEMM( (m+1) % descC.mt, n, k )
RW   C <- (k == 0)            ? dataC(m, n) : C GEMM( m, n, k-1 )
       -> (k == (descA.mt-1)) ? dataC(m, n) : C GEMM( m, n, k+1 )
BODY [type=CUDA dyld=magmablas_ZGEMM]
    dague_complex64_t lbeta = (k == 0) ? beta : (dague_complex64_t)1.0;
    int tempmm = m == descC.mt-1 ? descC.m - m * descC.mb : descC.mb;
    int tempnn = n == descC.nt-1 ? descC.n - n * descC.nb : descC.nb;
    int tempkk = k == descA.mt-1 ? descA.m - k * descA.nb : descA.nb;
    int ldak = BLKLDD(descA, k);
    int ldbn = BLKLDD(descB, n);
    int ldcm = BLKLDD(descC, m);

    return gpu_zgemm(context, this_task,
                     ( k == descA.nt-1 ),
                     transA, transB,
                     tempmm, tempnn, tempkk,
                     alpha, k, m, &descA, ldak,
                     n, k, &descB, ldbn,
                     lbeta, m, n, &descC, ldcm);
END

BODY
{
    dague_complex64_t lbeta = (k == 0) ? beta : (dague_complex64_t)1.0;
    int tempmm = m == descC.mt-1 ? descC.m - m * descC.mb : descC.mb;
    int tempnn = n == descC.nt-1 ? descC.n - n * descC.nb : descC.nb;
    int tempkk = k == descA.mt-1 ? descA.m - k * descA.nb : descA.nb;
    int ldak = BLKLDD(descA, k);
    int ldbn = BLKLDD(descB, n);
    int ldcm = BLKLDD(descC, m);

#if !defined(DAGUE_DRY_RUN)
    CORE_zgemm(transA, transB,
               tempmm, tempnn, tempkk,
               alpha, A /*A(k, m)*/, ldak,
                      B /*B(n, k)*/, ldbn,
               lbeta, C /*C(m, n)*/, ldcm);
#endif  /* !defined(DAGUE_DRY_RUN) */

    printlog("gemm( %d, %d, %d )\n"
             "    ( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
             m, n, k,
             plasma_const( transA ), plasma_const( transB ),
             tempmm, tempnn, tempkk,
             creal(alpha), k, m, ldak,
                           n, k, ldbn,
             creal(lbeta), m, n, ldcm);
}
END
