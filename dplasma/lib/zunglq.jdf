extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

dataA     [type = "dague_ddesc_t *"]
dataT     [type = "dague_ddesc_t *"]
dataQ     [type = "dague_ddesc_t *"]
p_work    [type = "dague_memory_pool_t *" size = "((sizeof(dague_complex64_t))*ib)*descT.nb"]

descA     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
descT     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataT)"]
descQ     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataQ)"]
ib        [type = "int" hidden = on default = "descT.mb" ]

zunmlq(k, m)
  /* Execution Space */
  k = 0 .. descA.mt-1
  m = 0 .. descQ.mt-1

  /* Locality */
  : dataQ(m, k)

  READ  A    <- A zunmlq_in_data_A0(k)   [type = UPPER_TILE]
  READ  T    <- T zunmlq_in_data_T1(k)   [type = LITTLE_T]
  RW    C    -> ( k == 0 ) ? dataQ(m, k)
             -> ( k >  0 ) ? A2 ztsmlq(k-1, k, m)
             <- ( k <  (descQ.nt-1)) ? A1 ztsmlq(k, k+1, m)
             <- ( k == (descQ.nt-1)) ? dataQ(m, k)

BODY
{
    int tempAkm  = (k == (descA.mt-1)) ? (descA.m - k * descA.mb) : descA.mb;
    int tempAkn  = (k == (descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int tempkmin = dplasma_imin( tempAkm, tempAkn );
    int tempmm   = (m == (descQ.mt-1)) ? (descQ.m - m * descQ.mb) : descQ.mb;
    int tempkn   = (k == (descQ.nt-1)) ? (descQ.n - k * descQ.nb) : descQ.nb;
    int ldak = BLKLDD( descA, k );
    int ldqm = BLKLDD( descQ, m );

#if !defined(DAGUE_DRY_RUN)
    void *p_elem_A = dague_private_memory_pop( p_work );

    CORE_zunmlq(PlasmaRight, PlasmaNoTrans,
                tempmm, tempkn, tempkmin, ib,
                A /* dataA(k, k) */, ldak,
                T /* dataT(k, k) */, descT.mb,
                C /* dataQ(m, k) */, ldqm,
                p_elem_A, descT.nb );

    dague_private_memory_push( p_work, p_elem_A );
#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

zunmlq_in_data_T1(k) [profile = off]
  /* Execution Space */
  k = 0 .. descA.mt-1

  /* Locality */
  : dataT(k,k)

  READ  T    <- dataT(k,k)                      [type = LITTLE_T]
             -> T zunmlq(k, 0 .. descQ.mt-1)    [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zunmlq_in_data_A0(k) [profile = off]
  /* Execution Space */
  k = 0 .. descA.mt-1

  /* Locality */
  : dataA(k,k)

  READ  A    <- dataA(k,k)                      [type = UPPER_TILE]
             -> A zunmlq(k, 0 .. (descQ.mt-1))  [type = UPPER_TILE]

BODY
{
    /* nothing */
}
END

ztsmlq(k, n, m)
  /* Execution Space */
  k = 0     .. inline_c %{ return dplasma_imin((descQ.nt-1),(descA.mt-1)); %}
  n = (k+1) .. (descQ.nt-1)
  m = 0     .. (descQ.mt-1)

  /* Locality */
  : dataQ(m,n)

  RW    A1   -> ( n == (k+1) ) ? C  zunmlq(k, m)
             -> ( n >  (k+1) ) ? A1 ztsmlq(k, n-1, m)
             <- ( n <  (descQ.nt-1) ) ? A1 ztsmlq(k, n+1, m)
             <- ( n == (descQ.nt-1) ) ? A1 ztsmlq_out_data_Q0(k, m)

  RW    A2   -> ( k == 0 ) ? dataQ(m, n)
             -> ( k >  0 ) ? A2 ztsmlq(k-1, n, m)
             <-  (k == (descA.mt-1)) ? dataQ(m, n)
             <- ((k <  (descA.mt-1)) & (n == (k+1))) ? C  zunmlq(k+1, m)
             <- ((k <  (descA.mt-1)) & (n >  (k+1))) ? A2 ztsmlq(k+1, n, m)

  READ  V    <- V ztsmlq_in_data_A1(k, n)
  READ  T    <- T ztsmlq_in_data_T2(k, n)  [type = LITTLE_T]

BODY
{
    int tempAkm = (k == (descA.mt-1)) ? (descA.m - k * descA.mb) : descA.mb;
    int tempmm  = (m == (descQ.mt-1)) ? (descQ.m - m * descQ.mb) : descQ.mb;
    int tempnn  = (n == (descQ.nt-1)) ? (descQ.n - n * descQ.nb) : descQ.nb;
    int ldak = BLKLDD( descA, k );
    int ldqm = BLKLDD( descQ, m );

    printlog("CORE_ztsmlq(%d, %d, %d)\n"
             "\t(side, trans, descQ.mb, tempnn, tempmm, tempnn, tempkmin, ib, Q(%d,%d)[%p], ldbk, Q(%d,%d)[%p], ldbm, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT.mb, p_elem_A, ldwork)\n",
             k, m, n, k, n, A1, m, n, A2, m, k, V, m, k, T);

#if !defined(DAGUE_DRY_RUN)
    void *p_elem_A = dague_private_memory_pop( p_work );

    CORE_ztsmlq( PlasmaRight, PlasmaNoTrans,
                 tempmm, descQ.nb, tempmm, tempnn, tempAkm, ib,
                 A1 /* dataQ(m, k) */, ldqm,
                 A2 /* dataQ(m, n) */, ldqm,
                 V  /* dataA(k, n) */, ldak,
                 T  /* dataT(k, n) */, descT.mb,
                 p_elem_A, descT.nb );

    dague_private_memory_push( p_work, p_elem_A );
#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

ztsmlq_in_data_T2(k, n) [profile = off]
  /* Execution Space */
  k = 0     .. inline_c %{ return dplasma_imin((descQ.nt-2),(descA.mt-1)); %}
  n = (k+1) .. (descQ.nt-1)

  /* Locality */
  : dataT(k,n)

  READ  T    <- dataT(k, n)                         [type = LITTLE_T]
             -> T ztsmlq(k, n, 0 .. (descQ.mt-1))   [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

ztsmlq_in_data_A1(k, n) [profile = off]
  /* Execution Space */
  k = 0     .. inline_c %{ return dplasma_imin((descQ.nt-2),(descA.mt-1)); %}
  n = (k+1) .. (descQ.nt-1)

  /* Locality */
  : dataA(k, n)

  READ  V    <- dataA(k, n)
             -> V ztsmlq(k, n, 0 .. (descQ.mt-1))

BODY
{
    /* nothing */
}
END

ztsmlq_out_data_Q0(k, m) [profile = off]
  /* Execution Space */
  k = 0 .. inline_c %{ return dplasma_imin((descQ.nt-2),(descA.mt-1)); %}
  m = 0 .. (descQ.mt-1)

  /* Locality */
  : dataQ(m, k)

  READ  A1   -> A1 ztsmlq(k, descQ.nt-1, m)
             <- dataQ(m, k)

BODY
{
    /* nothing */
}
END
