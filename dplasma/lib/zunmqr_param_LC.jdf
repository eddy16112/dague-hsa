extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> z c d s
 *
 */
#define PRECISION_z

#include "dague.h"
#include <math.h>
#include <plasma.h>
#include <core_blas.h>

#include <lapacke.h>

#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma_qr_pivgen.h"

%}

side      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
dataA     [type = "dague_ddesc_t *"]
dataB     [type = "dague_ddesc_t *"]
dataTS    [type = "dague_ddesc_t *" aligned=dataA ]
dataTT    [type = "dague_ddesc_t *" aligned=dataA ]
qrtree    [type = "dplasma_qrtree_t"]

descA   [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)dataA)"  hidden=on]
descB   [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)dataB)"  hidden=on]
descTS  [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)dataTS)" hidden=on]
descTT  [type = "tiled_matrix_desc_t" default="*((tiled_matrix_desc_t*)dataTT)" hidden=on]
ib      [type = "int" hidden = on default = "descTS.mb" ]

p_work  [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descTS.nb))"]

zunmqr(k, i, n)

  /* Execution space */
  k = 0 .. descB.mt-1
  i = 0 .. inline_c %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  n = 0 .. descB.nt-1

  m     = inline_c %{ return qrtree.getm(    &qrtree, k, i); %}
  nextm = inline_c %{ return qrtree.nextpiv( &qrtree, k, m, descA.mt); %}

  /* Locality */
  : dataB(m, n)

  READ  A    <- A zunmqr_in(k, i)   [type = LOWER_TILE]
  READ  T    <- T zunmqr_in(k, i)   [type = LITTLE_T]
  RW    C    <- ( k == 0 ) ? dataB(m, n)
             <- ( k >  0 ) ? A2 zttmqr(k-1, m, n)
             -> ( k == descA.mt-1 ) ? dataB(m, n)
             -> ((k <  descA.mt-1) & (nextm != descA.mt) ) ? A1 zttmqr(k, nextm, n)
             -> ((k <  descA.mt-1) & (nextm == descA.mt) ) ? A2 zttmqr(k, m,     n)

BODY
{
    printlog("CORE_zunmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, tempmm, tempnn, min(tempmm, tempnn), ib, \n"
             "\t A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTS.mb, A(%d,%d)[%p], ldam, p_elem_A, descTS.nb)",
             k, m, n, m, k, A, m, k, T, m, n, C);

    DRYRUN(
        void *p_elem_B = dague_private_memory_pop( p_work );

        int tempAmm = ( m == descA.mt-1 ) ? descA.m - m * descA.mb : descA.mb;
        int tempAkn = ( k == descA.nt-1 ) ? descA.n - k * descA.nb : descA.nb;
         int tempmin = dague_imin( tempAmm, tempAkn );
        int tempmm  = (m == (descB.mt-1)) ? (descB.m - m * descB.mb) : descB.mb;
        int tempnn  = (n == (descB.nt-1)) ? (descB.n - n * descB.nb) : descB.nb;
        int ldam    = BLKLDD( descA, m );
        int ldbm    = BLKLDD( descB, m );

        CORE_zunmqr(
            side, trans,
            tempmm, tempnn, tempmin, ib,
            A /* A(m, k) */, ldam,
            T /* T(m, k) */, descTS.mb,
            C /* B(m, n) */, ldbm,
            p_elem_B, descTS.nb );

        dague_private_memory_push( p_work, p_elem_B );
           );
}
END

zunmqr_in(k,i)  [profile = off]
  k = 0 .. descB.mt-1
  i = 0 .. inline_c %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m = inline_c %{ return qrtree.getm( &qrtree, k, i); %}

  : dataA(m, k)

  RW A <- dataA(m,k)                       [type = LOWER_TILE]
       -> A zunmqr(k, i, 0..descB.nt-1)    [type = LOWER_TILE]

  RW T <- dataTS(m,k)                      [type = LITTLE_T]
       -> T zunmqr(k, i, 0..descB.nt-1)    [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmqr(k, m, n)
  /* Execution Space */
  k = 0   .. descB.mt-2
  m = k+1 .. descB.mt-1
  n = 0   .. descB.nt-1

  p =     inline_c %{ return qrtree.currpiv( &qrtree, k,   m);    %}
  nextp = inline_c %{ return qrtree.nextpiv( &qrtree, k,   p, m); %}
  prevp = inline_c %{ return qrtree.prevpiv( &qrtree, k,   p, m); %}
  prevm = inline_c %{ return qrtree.prevpiv( &qrtree, k,   m, m); %}
  type  = inline_c %{ return qrtree.gettype( &qrtree, k,   m );   %}
  type1 = inline_c %{ return qrtree.gettype( &qrtree, k+1, m );   %}
  ip    = inline_c %{ return qrtree.geti(    &qrtree, k,   p );   %}
  im    = inline_c %{ return qrtree.geti(    &qrtree, k,   m );   %}
  im1   = inline_c %{ return qrtree.geti(    &qrtree, k+1, m );   %}

  /* Locality */
  : dataB(m, n)

  RW    A1   <-  (prevp == descA.mt) ? C zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n )

             ->  (nextp != descA.mt) ?                A1 zttmqr( k, nextp, n)
             -> ((nextp == descA.mt) & ( p == k ) ) ? A  zttmqr_out_B(p, n)
             -> ((nextp == descA.mt) & ( p != k ) ) ? A2 zttmqr( k, p, n )

  RW    A2   <- ( (type  == 0 ) && (k     == 0        ) ) ? dataB(m, n)
             <- ( (type  == 0 ) && (k     != 0        ) ) ? A2 zttmqr(k-1, m, n )
             <- ( (type  != 0 ) && (prevm == descA.mt ) ) ? C  zunmqr(k, im, n)
             <- ( (type  != 0 ) && (prevm != descA.mt ) ) ? A1 zttmqr(k, prevm, n )

             ->   (k == (descA.nt-1))                    ? dataB( m, n )
             -> ( (k != (descA.nt-1)) && (type1 != 0 ) ) ? C  zunmqr( k+1, im1, n )
             -> ( (k != (descA.nt-1)) && (type1 == 0 ) ) ? A2 zttmqr( k+1, m, n )

  READ  V    <- (type == 0) ? A zttmqr_in(k,m)
             <- (type != 0) ? A zttmqr_in(k,m)                       [type = UPPER_TILE]

  READ  T    <- T zttmqr_in(k,m)                                     [type = LITTLE_T]

BODY
{
    int tempkn = ( k == (descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int tempmm = ( m == (descB.mt-1)) ? (descB.m - m * descB.mb) : descB.mb;
    int tempnn = ( n == (descB.nt-1)) ? (descB.n - n * descB.nb) : descB.nb;
    int ldbp = BLKLDD( descB, p );
    int ldam = BLKLDD( descA, m );
    int ldbm = BLKLDD( descB, m );
    int ldwork = ib;

    DRYRUN(
        void *p_elem_B = dague_private_memory_pop( p_work );

        if ( type == DPLASMA_QR_KILLED_BY_TS ) {
            CORE_ztsmqr(
                side, trans,
                descB.mb, tempnn, tempmm, tempnn, tempkn, ib,
                A1 /* B(p, n) */, ldbp,
                A2 /* B(m, n) */, ldbm,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_B, ldwork );
        } else {
            CORE_zttmqr(
                side, trans,
                descB.mb, tempnn, tempmm, tempnn, tempkn, ib,
                A1 /* B(p, n) */, ldbp,
                A2 /* B(m, n) */, ldbm,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, descTT.mb,
                p_elem_B, ldwork );
        }
        dague_private_memory_push( p_work, p_elem_B );

           );

    printlog("CORE_zttmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, \n"
             "\t A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descTT.mb, p_elem_A, ldwork)",
             k, m, n, p, n, A1, m, n, A2, m, k, V, m, k, T);
}
END

zttmqr_in(k,m)  [profile = off]
  k = 0   .. descA.mt-2
  m = k+1 .. descA.mt-1
  type = inline_c %{ return qrtree.gettype( &qrtree, k, m );   %}

  : dataA(m, k)

  RW A <- dataA(m,k)
       -> (type == 0) ? V zttmqr(k, m, 0..descB.nt-1)
       -> (type != 0) ? V zttmqr(k, m, 0..descB.nt-1) [type = UPPER_TILE]

  RW T <- dataTT(m,k)                       [type = LITTLE_T]
       -> T zttmqr(k, m, 0..descB.nt-1)     [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmqr_out_B(k, n) [profile = off]
  k = 0 .. descA.mt-2
  n = 0 .. descB.nt-1
  prevp = inline_c %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : dataB(k, n)

  RW A <- A1 zttmqr( k, prevp, n )
       -> dataB(k, n)

BODY
/* nothing */
END
