extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>
#include <math.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma/cores/dplasma_zcores.h"

%}

/* Globals
 */
descA        [type = "tiled_matrix_desc_t"]
A            [type = "dague_ddesc_t *"]
descW        [type = "tiled_matrix_desc_t"]
W            [type = "dague_ddesc_t *"]
descS        [type = "tiled_matrix_desc_t"]
S            [type = "dague_ddesc_t *"]
P            [type = "int"]
Q            [type = "int"]

/**************************************************
 *                    STEP1                       *
 **************************************************/
STEP1(m,n) [high_priority = on]

// Execution space
m = 0..descA.mt-1
n = 0..descA.nt-1

// Parallel partitioning
:A(m, n)

// Parameters
READ      A <-  A(m, n)
RW        W <-  (descA.nt-n<=Q)? W(m, n%Q) : W STEP1(m,n+Q)                   [type = WTAB aligned=A]
            ->  (n<Q)? W ROW_REDUCE(m,n) : W STEP1(m,n-Q)                     [type = WTAB]
            ->  (n==0)? V ROW_REDUCE(m,0)                                     [type = WTAB]

BODY
    DRYRUN(
            int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : (descA.mb);
            int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : (descA.nb);
            int ldam = BLKLDD( descA, m );
            int i;
            if(descA.nt-n<=Q)
                  for(i = 0; i < tempmm; i++)
                        ((double *)W)[i] = 0;
            CORE_dzasum(PlasmaRowwise, PlasmaUpperLower,
                        tempmm, tempnn,
                        A, ldam, W);
          );
    printlog("STEP1(%d,%d) with P=%d, Q=%d, tempmm=%d, tempnn=%d\n",m,n,P,Q, tempmm, tempnn);
END

/**************************************************
 *                    ROW_REDUCE                  *
 **************************************************/
ROW_REDUCE(m,n) [high_priority = on]

// Execution space
m = 0..descA.mt-1
n = 0..Q-1

// Parallel partitioning
:A(m, n)

// Parameters
RW        W <-  W STEP1(m,n)                                                    [type = WTAB]
            ->  (n == Q-1)? W STEP3(m,0..Q-1) : V ROW_REDUCE(m,n+1)             [type = WTAB]
READ      V <-  (n == 0)? W STEP1(m,0) : W ROW_REDUCE(m,n-1)                    [type = WTAB]


BODY
    DRYRUN(
        int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : (descA.mb);
        int ldam = BLKLDD( descA, m );
        if(n != 0)
        {
            CORE_dasum(PlasmaRowwise, PlasmaUpperLower,
                       tempmm, descA.nb,
                       V, ldam, W);
        }
          );
    printlog("ROW_REDUCE(%d,%d), tempmm=%d\n",m,n, tempmm);
END


/**************************************************
 *                    STEP3                       *
 **************************************************/
STEP3(m,n) [high_priority = on]

// Execution space
m = 0..descA.mt-1
n = 0..Q-1

// Parallel partitioning
:S(m, n)

// Parameters
READ      W <-  W ROW_REDUCE(m,Q-1)                                             [type = WTAB]
RW        S <-  (descA.mt-m<=P)? S(m%P, n) : S STEP3(m+P,n)                     [type = STAB aligned=S]
            ->  (m<P)? W COL_REDUCE(m,n) : S STEP3(m-P,n)                       [type = STAB]
            ->  (m==0)? V COL_REDUCE(0,n)                                       [type = STAB]

BODY
    DRYRUN(
            int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : (descA.mb);
            int i;
            if(descA.mt-m<=P)
                  ((double *)S)[0] = 0;
            for(i = 0; i < tempmm; i++)
                  if(((double *)S)[0] < ((double *)W)[i])
                              ((double *)S)[0] = ((double *)W)[i];
          );
    printlog("STEP3(%d,%d), tempmm=%d\n",m,n, tempmm);
END
/**************************************************
 *                    COL_REDUCE                  *
 **************************************************/
COL_REDUCE(m,n) [high_priority = on]

// Execution space
m = 0..P-1
n = 0..Q-1

// Parallel partitioning
:S(m, n)

// Parameters
RW        W <-  S STEP3(m,n)                                                    [type = STAB]
            -> (m == P-1)? S STEP5(0..P-1,n): V COL_REDUCE(m+1,n)             [type = STAB]
READ      V <-  (m == 0)? S STEP3(0,n) : W COL_REDUCE(m-1,n)                    [type = STAB]

BODY
    DRYRUN(
        if(m != 0)
           if(((double *)W)[0] < ((double *)V)[0])
                       ((double *)W)[0] = ((double *)V)[0];
          );
    printlog("COL_REDUCE(%d,%d)\n",m,n);
END

/**************************************************
 *                      STEP5                     *
 **************************************************/
STEP5(m,n) [high_priority = on]

// Execution space
m = 0..P-1
n = 0..Q-1

// Parallel partitioning
:S(m, n)

// Parameters
READ      S <-  W COL_REDUCE(P-1,n)                                                [type = STAB]
            -> S(m,n)                                                             [type = STAB]


BODY

END
