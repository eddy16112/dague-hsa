extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

#if defined(HAVE_CUDA)
#include "gpu_data.h"
#include "dplasma/cores/cuda_zgemm.h"
extern int *gpu_counter;
#endif  /* defined(HAVE_CUDA) */

/*
 * Priorities used in this jdf:
 *      - POTRF(k)    : (MT-k)**3
 *      - HERK(k,n)   : (MT-n)**3 + 3 * (n - k)
 *      - TRSM(n,k)   : (MT-n)**3 + 3 * (n - k) * (2 * MT - k - n - 1)
 *      - GEMM(k,m,n) : (MT-n)**3 + 3 * (n - m) * (2 * MT - m - n - 1) + 6 * (n - k)
 *
 * So max priority is:
 *      (MT - PRI_CHANGE)**3 + 3 * MT * (2 * MT - PRI_CHANGE - 1) + 6 * MT  < (MT**3 + 6 MT**2 + 3 MT)
 *
 * WARNING: If mt is greater than 1200, we might get integer overflow.
 */

%}

/* Globals
 */
uplo       [type = PLASMA_enum]
dataA      [type = "dague_ddesc_t *"]
INFO       [type = "int*"]

descA      [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
PRI_CHANGE [type = "int" hidden = on default = 0 ]
PRI_MAX    [type = "int" hidden = on default = "(descA.mt * ( 3 + descA.mt * ( 2 + descA.mt )))" ]

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) [high_priority = on]

// Execution space
k = 0 .. descA.nt-1

// Parallel partitioning
:dataA(k, k)

// Parameters
RW T <- (k == 0) ? dataA(k, k) : T HERK(k-1, k)
     -> T TRSM(k, k+1..descA.nt-1)
     -> dataA(k, k)

; (k >= (descA.nt - PRI_CHANGE)) ? (descA.nt - k) * (descA.nt - k) * (descA.nt - k) : PRI_MAX

BODY
{
#if defined(HAVE_CUDA)
    moesi_master_update( descA.super.moesi_map, TILED_MATRIX_KEY( &descA, k, k ) );
#endif  /* defined(HAVE_CUDA) */

    int tempkn = k == descA.nt-1 ? descA.n - k*descA.nb : descA.nb;
    int iinfo = 0;
    int ldak = BLKLDD( descA, k );

#if !defined(DAGUE_DRY_RUN)
        CORE_zpotrf(
            uplo, tempkn, T, ldak,
            &iinfo );
        if ( iinfo != 0 && *INFO == 0 )
            *INFO = k*descA.nb+iinfo; /* Should return here */
#endif /* !defined(DAGUE_DRY_RUN) */

    printlog(
             "CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d) return info = %d\n",
             k,
             plasma_const(uplo), tempkn, k, k, T, ldak, iinfo );
}
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, n) [high_priority = on]

// Execution space
k = 0   .. descA.nt-2
n = k+1 .. descA.nt-1

// Parallel partitioning
: dataA(k, n)

// Parameters
READ  T <- T POTRF(k)
RW    C <- (k == 0) ? dataA(k, n) : C GEMM(k-1, k, n)
        -> A HERK(k, n)
        -> A GEMM(k, n, n+1..descA.nt-1)
        -> B GEMM(k, k+1..n-1, n )
        -> dataA(k, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * ((2 * descA.nt) - k - n - 1) * (n - k) : PRI_MAX

BODY
{
#if defined(HAVE_CUDA)
    moesi_master_update( descA.super.moesi_map, TILED_MATRIX_KEY( &descA, k, n ) );
#endif  /* defined(HAVE_CUDA) */

    int tempnn = n == descA.nt-1 ? descA.n - n * descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );

#if !defined(DAGUE_DRY_RUN)
        CORE_ztrsm(
            PlasmaLeft, PlasmaUpper, PlasmaConjTrans, PlasmaNonUnit,
            descA.mb, tempnn,
            (dague_complex64_t)1.0, T /*A(k, k)*/, ldak,
                                    C /*A(k, n)*/, ldak);
#endif /* !defined(DAGUE_DRY_RUN) */

    printlog("CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             k, n,
             plasma_const( PlasmaLeft ), plasma_const( PlasmaUpper ),
             plasma_const( PlasmaConjTrans ), plasma_const( PlasmaNonUnit ),
             descA.mb, tempnn,
             1.0, k, k, T, ldak,
                  k, n, C, ldak);
}
END


/**************************************************
 *                      HERK                      *
 **************************************************/
HERK(k, n) [high_priority = on]

// Execution space
k = 0   .. descA.nt-2
n = k+1 .. descA.nt-1

// Parallel partitioning
: dataA(n, n)

//Parameters
READ  A <- C TRSM(k, n)
RW    T <- (k == 0)   ? dataA(n, n) : T HERK(k-1, n)
        -> (n == k+1) ? T POTRF(n)  : T HERK(k+1, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * (n - k) : PRI_MAX

BODY
{
#if defined(HAVE_CUDA)
    moesi_master_update( descA.super.moesi_map, TILED_MATRIX_KEY( &descA, n, n ) );
#endif  /* defined(HAVE_CUDA) */

    int tempnn = n == descA.nt-1 ? descA.n - n*descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldan = BLKLDD( descA, n );

#if !defined(DAGUE_DRY_RUN)
        CORE_zherk(
            PlasmaUpper, PlasmaConjTrans,
            tempnn, descA.mb,
            (double)-1.0, A /*A(k, n)*/, ldak,
            (double) 1.0, T /*A(n, n)*/, ldan);
#endif /* !defined(DAGUE_DRY_RUN) */
    printlog(
             "CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             k, n,
             plasma_const( PlasmaUpper ), plasma_const( PlasmaConjTrans ),
             tempnn, descA.mb,
             -1.0, k, n, A, ldak,
              1.0, n, n, T, ldan);
}
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0   .. descA.mt-3
m = k+1 .. descA.mt-1
n = m+1 .. descA.nt-1

// Parallel partitioning
: dataA(m, n)

// Parameters
READ  A <- C TRSM(k, m)
READ  B <- C TRSM(k, n)
RW    C <- (k == 0)   ? dataA(m, n)      : C GEMM(k-1, m, n)
        -> (m == k+1) ? C TRSM(m, n) : C GEMM(k+1, m, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * ((2 * descA.nt) - m - n - 3) * (n - m) + 6 * (n - k) : PRI_MAX

BODY
{
    int tempnn = n == descA.nt-1 ? descA.n - n * descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

#if defined(HAVE_CUDA)
    if( dague_active_gpu() > 0 ) {
        int rc;

        if( 0 == (rc = gpu_zgemm( context, this_task,
                                  ( m == k+1 ),
                                  PlasmaConjTrans, PlasmaNoTrans,
                                  descA.mb, tempnn, descA.mb,
                                  (dague_complex64_t)-1.0, k, m, &descA, ldak,
                                                           k, n, &descA, ldak,
                                  (dague_complex64_t) 1.0, m, n, &descA, ldam)) )
            goto FIN;
        if( -1 == rc ) {
            /* The task is pending in the device, and will be subsequently completed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
            fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
            exit(2);
        }
    }
    moesi_master_update( descA.super.moesi_map, TILED_MATRIX_KEY( &descA, m, n ) );
#endif  /* defined(HAVE_CUDA) */

#if !defined(DAGUE_DRY_RUN)
        CORE_zgemm(
            PlasmaConjTrans, PlasmaNoTrans,
            descA.mb, tempnn, descA.nb,
            (dague_complex64_t)-1.0, A /*A(k, m)*/, ldak,
                                     B /*A(k, n)*/, ldak,
            (dague_complex64_t) 1.0, C /*A(m, n)*/, ldam);
#endif /* !defined(DAGUE_DRY_RUN) */

#if defined(HAVE_CUDA)
  FIN:
#endif

    printlog("CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %e, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %e, A(%d,%d)[%p], %d)\n",
             k, m, n,
             plasma_const( PlasmaConjTrans ),  plasma_const( PlasmaNoTrans ),
             descA.mb, tempnn, descA.nb,
             -1.0, k, m, A, ldak,
                   k, n, B, ldak,
              1.0, m, n, C, ldam);
}
END
