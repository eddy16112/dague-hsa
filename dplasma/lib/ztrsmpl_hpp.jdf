extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include "dague.h"
#include <math.h>
#include <plasma.h>
#include <core_blas.h>

#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma_qr_pivgen.h"
#include "dplasma/cores/dplasma_zcores.h"

#define MYMIN(a, b) ((a)<(b)?(a):(b))
#define MYMAX(a, b) ((a)>(b)?(a):(b))

//#define PRIO_YVES1

#if defined(PRIO_YVES1)
#define GETPRIO_PANEL( __m, __n )      descA.mt * descA.nt - ((descA.nt - (__n) - 1) * descA.mt + (__m) + 1)
#define GETPRIO_UPDTE( __m, __n, __k ) descA.mt * descA.nt - ((descA.nt - (__n) - 1) * descA.mt + (__m) + 1)
#elif defined(PRIO_YVES2)
#define GETPRIO_PANEL( __m, __n )      descA.mt * descA.nt - ((__m) * descA.nt + descA.nt - (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) descA.mt * descA.nt - ((__m) * descA.nt + descA.nt - (__n))
#elif defined(PRIO_MATHIEU1)
#define GETPRIO_PANEL( __m, __n )      (descA.mt + (__n) - (__m) - 1) * descA.nt + (__n)
#define GETPRIO_UPDTE( __m, __n, __k ) (descA.mt + (__n) - (__m) - 1) * descA.nt + (__n)
#elif defined(PRIO_MATHIEU2)
#define GETPRIO_PANEL( __m, __n )      ((MYMAX(descA.mt, descA.nt) - MYMAX( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) ((MYMAX(descA.mt, descA.nt) - MYMAX( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#elif defined(PRIO_MATYVES)
#define FORMULE( __x ) ( ( -1. + sqrt( 1. + 4.* (__x) * (__x)) ) * 0.5 )
#define GETPRIO_PANEL( __m, __k )      (int)( 22. * (__k) + 6. * ( FORMULE( descA.mt ) - FORMULE( (__m) - (__k) + 1. ) ) )
#define GETPRIO_UPDTE( __m, __n, __k ) (int)( (__m) < (__n) ? GETPRIO_PANEL( (__n), (__n) ) - 22. * ( (__m) - (__k) ) - 6. * ( (__n) - (__m) ) \
                                              :               GETPRIO_PANEL( (__m), (__n) ) - 22. * ( (__n) - (__k) ) )
#else
  /*#warning running without priority*/
#define GETPRIO_PANEL( __m, __n )      0
#define GETPRIO_UPDTE( __m, __n, __k ) 0
#endif

PLASMA_desc plasma_desc_init(PLASMA_enum dtyp, int mb, int nb, int bsiz,
                             int lm, int ln, int i, int j, int m, int n);

%}

descA   [type = "tiled_matrix_desc_t"]
A       [type = "dague_ddesc_t *"]
descB   [type = "tiled_matrix_desc_t"]
B       [type = "dague_ddesc_t *"]
IPIV    [type = "dague_ddesc_t *" aligned=A]
descLT  [type = "tiled_matrix_desc_t"]
LT      [type = "dague_ddesc_t *" aligned=A]
pivfct  [type = "qr_piv_t*"]
ib      [type = int]
p_work  [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descLT.nb))"]
p_tau   [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(descLT.nb))"]
INFO    [type = "int*"]

param_p [type = int default="pivfct->p"      hidden=on]
param_a [type = int default="pivfct->a"      hidden=on]
param_d [type = int default="pivfct->domino" hidden=on]


/*
 * GETRF kernel
 *
 * There are dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) geqrt applyed at step
 * k on the rows indexed by m.
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA.mt if the row m is never used as a killer.
 *
 */

swptrsm_in(k, i)
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  i = 0..inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}
  m = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}

  : A(m,k)

  READ A <- A(m,k)
         -> A swptrsm(k, i, 0..descB.nt-1)
  READ P <- IPIV(m,k)									    [type = PIVOT]
         -> IP swptrsm(k, i, 0..descB.nt-1)				[type = PIVOT]

BODY
	/*Nothing*/
END


swptrsm(k, i, n)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  i = 0..inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}
  n = 0..descB.nt-1
  m = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}
  s = inline_c %{ return dplasma_qr_getsize( pivfct, k, i); %}
  nextm = inline_c %{ return dplasma_qr_nexttriangle( pivfct, m, k, descA.mt); %}
  m1 = inline_c %{ return m + param_p; %}
  ms = inline_c %{ return m + (s-1)*param_p; %}

  /* Locality */
  :B(m, n)

  READ  A    <- A swptrsm_in(k,i)
  READ  IP   <- P swptrsm_in(k,i)                               [type = PIVOT]
  RW    C    <- ( k == 0 ) ? B(m,n) : C zttmqr(k-1, m, n)
             -> (k == descA.mt-1) ? B(m,n)
             -> (k < descA.mt-1) ? V zttmqr(k, m1..ms..param_p, n)
             -> ( (k < descA.mt-1) & (nextm != descA.mt) ) ?  V zttmqr(k, nextm, n)  [type = UPPER_TILE]
             -> ( (k < descA.mt-1) & (nextm == descA.mt) ) ?  C zttmqr(k, m, n)      [type = UPPER_TILE]
  CTL   ctl  <- ( k > 0 ) ? ctl2 tile2panel(k-1, ms, n)

/* Priority */
;descA.nt-n-1

BODY

  DRYRUN(
         int tempmmB = ((m)==(descB.mt-1)) ? (descB.m-(m*descB.mb)) : (descB.mb);
         int tempnnB = ((n)==(descB.nt-1)) ? (descB.n-(n*descB.nb)) : (descB.nb);
         int temp_m_plus_s_minus_one_mB  = (m+(s-1)*param_p == descB.mt-1) ? descB.m-(m+(s-1)*param_p)*descB.mb : descB.mb;
         int tempmB = (s-1)*descB.mb + temp_m_plus_s_minus_one_mB;
         int ldam = BLKLDD(descA, m);
         int ldbm = BLKLDD(descB, m);
         //int tempk = k * descA.mb;
         //int tempm = descA.m - tempk;
         int tempknB = k == descB.nt-1 ? descB.n-k*descB.nb : descB.nb;

         printlog("BEGIN thread %d   CORE_zswptrsm(%d, %d, %d)\n"
            "\t(%d, %d, A(%d,%d)[%p], A(%d,%d)[%p])\n",
            context->eu_id, k, i, n, tempmmB, tempnnB, m, k, A, m, n, C);

         PLASMA_desc pdescB = plasma_desc_init( PlasmaComplexDouble,
                                             descB.mb, descB.nb, descB.mb * descB.nb,
                                             s*descB.mb, descB.nb, 0, 0,
                                             tempmB, tempknB);
         pdescB.mat = (void*)A;

         CORE_zlaswp_ontile(pdescB, 1, tempmmB, IP, 1);

         CORE_ztrsm(
             PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit,
             tempmmB, tempnnB,
             1., A /*A(m, k)*/, ldam,
                 C /*B(m, n)*/, ldbm);
         );

   printlog("EN thread %d   CORE_zswptrsm(%d, %d, %d)\n"
            "\t(%d, %d, A(%d,%d)[%p], A(%d,%d)[%p])\n",
            context->eu_id, k, i, n, tempmmB, tempnnB, m, k, A, m, n, C);

END



/*
 * TTMQR kernel (see TTQRT)
 *
 * type1 defines the operations to perfom at next step k+1 on the row m
 *   if type1 == 0, it will be a TS so the tile goes to a TTQRT/TTMQR operation
 *   if type1 != 0, it will be a TT so the tile goes to a GEQRT/UNMQR operation
 * im1 is the index of the killer m at the next step k+1 if its type is !0, descA.mt otherwise
 *
 */

zttmqr_out(k, n) [profile = off]
  k = 0..( (descA.mt < descA.nt) ? descA.mt-2 : descA.nt-2 )
  n = 0..descB.nt-1
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, k, k, k); %}

  : B(k, n)

  RW A <- V zttmqr( k, prevp, n )
       -> B(k, n)
BODY
/* nothing */
END


zttmqr_in(k, m)
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  
  : A(m,k)

  READ A <- A(m,k)
         -> H zttmqr(k, m, 0..descB.nt-1)
  READ T <- LT(m,k)
         -> T zttmqr(k, m, 0..descB.nt-1)

BODY
	/*Nothing*/
END



zttmqr(k, m, n)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  n = 0..descB.nt-1
  p =     inline_c %{ return dplasma_qr_currpiv(pivfct, m, k); %}
  nextp = inline_c %{ return dplasma_qr_nextpiv(pivfct, p, k, m); %}
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, p, k, m); %}
  prevm = inline_c %{ return dplasma_qr_prevpiv(pivfct, m, k, m); %}
  type  = inline_c %{ return dplasma_qr_gettype( pivfct, k,   m ); %}
  nexttype = inline_c %{ return dplasma_qr_gettype( pivfct, k+1, m ); %}
  ip    = inline_c %{ return dplasma_qr_geti(    pivfct, k,   p ); %}
  im    = inline_c %{ return dplasma_qr_geti(    pivfct, k,   m ); %}
  nextim   = inline_c %{ return dplasma_qr_geti(    pivfct, k+1, m ); %}
  nextm = inline_c %{ return dplasma_qr_nexttriangle( pivfct, m, k, descA.mt); %}

  SIMCOST inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? 12 : 6; %}

  : B(m, n)

  /* H  == A(m, k) */
  /* T  == T(m, k) */
  /* V == B(p, n) */
  /* C == B(m, n) */

  RW   V  <- (   prevp == descA.mt ) ? C  swptrsm( k, ip, n ) 
          <- (   prevp != descA.mt ) ? V zttmqr(k, prevp, n )
          -> ( ( nextp == descA.mt ) & ( p == k ) ) ? A zttmqr_out(k, n)
          -> ( ( nextp == descA.mt ) & ( p != k ) ) ? C zttmqr( k, p, n )
          -> (   nextp != descA.mt ) ? V zttmqr( k, nextp, n)
  READ  H <- A zttmqr_in(k,m)
  RW   C  <- ( (type  != 0 ) && (prevm == descA.mt ) ) ? C  swptrsm(k, im, n)       
          <- ( (type  != 0 ) && (prevm != descA.mt ) ) ? V zttmqr(k, prevm, n )  
          <- ( (type  == 0 ) && (k     == 0        ) ) ? B(m, n)                   
          <- ( (type  == 0 ) && (k     != 0        ) ) ? C zttmqr(k-1, m, n )     
          -> (nexttype != 0 ) ? C  swptrsm( k+1, nextim, n )            
          -> (nexttype == 0 ) ? C zttmqr( k+1, m, n )             
  READ  T <- T zttmqr_in(k,m)                                                     [type = LITTLE_T]
  CTL ctl -> ctl1 tile2panel(k, m, n)

    ; inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? GETPRIO_UPDTE(p, n, k) : GETPRIO_UPDTE(m, n, k); %}

BODY
  DRYRUN(
         void *p_elem_A = dague_private_memory_pop( p_work );

         int tempnnB = ((n)==((descB.nt)-1)) ? ((descB.n)-(n*(descB.nb))) : (descB.nb);
         int tempmmB = ((m)==((descB.mt)-1)) ? ((descB.m)-(m*(descB.mb))) : (descB.mb);
         int ldam = BLKLDD( descA, m );
         int ldbm = BLKLDD( descB, m );
         int ldbp = BLKLDD( descB, p );
         int ldwork = ib;

          printlog("BEGIN thread %d CORE_zttmqr(%d, %d, %d)\n"
           "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, \n"
           "\t A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descLT.mb, p_elem_A, ldwork)\n",
           context->eu_id, k, m, n, p, n, V, m, n, C, m, k, H, m, k, T);

         if ( type == DPLASMA_QR_KILLED_BY_TS ) {
           CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
                 tempmmB, tempnnB, descB.mb,
                 -1., H /*A(m, k)*/, ldam,
                      V /*B(p, n)*/, ldbp,
                 1.,  C /*B(m, n)*/, ldbm );
         } else {
           CORE_zttmqr(
             PlasmaLeft, PlasmaConjTrans,
             descB.mb, tempnnB, tempmmB, tempnnB, descB.nb, ib,
             V /* B(p, n) */, descB.mb,
             C /* B(m, n) */, ldbm,
             H  /* A(m, k) */, ldam,
             T  /* T(m, k) */, descLT.mb,
             p_elem_A, ldwork );
         }
         dague_private_memory_push( p_work, p_elem_A );

         );

  printlog("EN thread %d CORE_zttmqr(%d, %d, %d)\n"
           "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, \n"
           "\t A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descLT.mb, p_elem_A, ldwork)\n",
           context->eu_id, k, m, n, p, n, V, m, n, C, m, k, H, m, k, T);

END


tile2panel(k, m, n) /*[profile = off]*/
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  n = 0..descB.nt-1
  type  = inline_c %{ return dplasma_qr_gettype( pivfct, k+1,   m ); %}
  m0 = inline_c %{ return type == 0 ? dplasma_qr_currpiv(pivfct, m, k+1) : m; %}
  i    = inline_c %{ return dplasma_qr_geti(    pivfct, k+1, m0 ); %}
  s = inline_c %{ return dplasma_qr_getsize( pivfct, k+1, i); %}
  ms = inline_c %{ return m0 + (s-1)*param_p; %}

  :A(k, n)

  CTL  ctl1 <- ctl zttmqr(k, m, n)
  CTL  ctl2 <- m > m0 ? ctl2 tile2panel(k, m-param_p, n)
            -> m < ms ? ctl2 tile2panel(k, m+param_p, n)
            -> (m == ms) ? ctl  swptrsm(k+1, i, n)

  ;descA.nt-n-1
BODY
    printlog("thread %d tile2panel( %d, %d, %d ) type = %d\n", context->eu_id, k, m, n, type);
END


