extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "dplasmajdf.h"

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
Amb  [type = int]
Anb  [type = int]
Amt  [type = int]
Ant  [type = int]
Am   [type = int]
An   [type = int]

Bmb  [type = int]
Bnb  [type = int]
Bmt  [type = int]
Bnt  [type = int]
Bm   [type = int]
Bn   [type = int]

side [type = int]
uplo [type = int]
trans[type = int]
diag [type = int]

alpha[type = Dague_Complex64_t]

/**************************************************
 *                      TRMM                      *
 **************************************************/
TRMM(m, n)

// Execution space
m = 0..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A   <- A(n, n)
RW    B   <- B(m, n)
          -> (n == Bnt-1) ? B(m, n) : C GEMM(m, n, n+1)
READ  CTL <- (n == 0) ? CTL(m, n) : CTL1 GOK(m, n-1, n)              [type = CONTROL]

BODY
      DRYRUN(
          CORE_ztrmm(
              side, uplo, trans, diag,
              m == Bmt-1 ? Bm - m * Bmb : Bmb,
              n == Bnt-1 ? Bn - n * Bnb : Bnb,
              alpha, A /*A(k, k)*/, Amb,
                     B /*B(k, n)*/, Bmb)
           );

      printlog("thread %d trmm( %d, %d )\n"
               "    ( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
               context->eu_id, m, n, "Right", "Upper", "NoTrans", "[Non]Unit",
               m == Bmt-1 ? Bm - m * Bmb : Bmb,
               n == Bnt-1 ? Bn - n * Bnb : Bnb,
               alpha, n, n, A /*A(k, k)*/, Amb,
                      m, n, B /*B(k, n)*/, Bmb);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(m, n, k)

// Execution space
m = 0..Bmt-1
n = 0..Bnt-1
k = (n+1)..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- B(m, k)
READ  B <- A(n, k)
RW    C <- (k == n+1)   ? B TRMM(m, n) : C GEMM(m, n, k-1)
        -> (k == Bnt-1) ? B(m, n)      : C GEMM(m, n, k+1)
RW    CTL <- CTL(m, k)                                          [type = CONTROL]
          -> CTL2 GOK(m, n, k)                                  [type = CONTROL]

BODY
      DRYRUN(
          CORE_zgemm(
              PlasmaNoTrans, trans,
              m == Bmt-1 ? Bm-m*Bmb : Bmb,
              n == Bnt-1 ? Bn-n*Bnb : Bnb,
              k == Ant-1 ? An-k*Anb : Anb,
              alpha, A, Bmb,
                     B, Amb,
              (Dague_Complex64_t)1.0,  C, Bmb)
          );

      printlog("thread %d gemm( %d, %d, %d )\n"
               "    ( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
               context->eu_id, m, n, k, "NoTrans", "[Conj]Trans",
               m == Bmt-1 ? Bm-m*Bmb : Bmb,
               n == Bnt-1 ? Bn-n*Bnb : Bnb,
               k == Ant-1 ? An-k*Anb : Anb,
               alpha, m, k, A, Bmb, n, k, B, Bmb,
               (Dague_Complex64_t)1.0, m, n, C, Bmb);
END

/**************************************************
 *                      GOK                       *
 **************************************************/
// Name
GOK(m, n, k)  [profile = off]

// Execution space
m = 0..Bmt-1
n = 0..Bnt-1
k = (n+1)..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
RW    CTL1 <- (n == 0)   ? CTL(m, n)      : CTL1 GOK(m, n-1, k)    [type = CONTROL]
           -> (n+1 == k) ? CTL TRMM(m, k) : CTL1 GOK(m, n+1, k)    [type = CONTROL]
READ  CTL2 <- CTL GEMM(m, n, k)                                    [type = CONTROL]
BODY
      /* Fake task to guaranty the end of all gemm using B(m, n) before to start TRMM */
     printlog("thread %d gok( %d, %d, %d )\n", context->eu_id, m, n, k);
END
