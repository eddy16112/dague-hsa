extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <core_blas.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

%}

dataA     [type = "dague_ddesc_t *"]
descA     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
dataT     [type = "dague_ddesc_t *" aligned=dataA]
descT     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataT)"]
ib        [type = "int"]
p_work    [type = "dague_memory_pool_t *" size = "(sizeof(dague_complex64_t)*ib*descT.nb)"]
p_tau     [type = "dague_memory_pool_t *" size = "(sizeof(dague_complex64_t)   *descT.nb)"]


zgeqrt_typechange(k)  [profile = off]
  /* Execution space */
  k = 0 .. inline_c %{ return dague_imin((descA.nt-1),(descA.mt-1)); %}

  : dataA(k,k)

RW A <- A zgeqrt(k)
     -> (descA.nt>=(k+2)) ? A zunmqr(k, (k+1)..(descA.nt-1)) [type = LOWER_TILE]
     -> dataA(k, k)                                          [type = LOWER_TILE]

BODY
{
    /* Nothing */
}
END

zgeqrt(k)
  /* Execution space */
  k = 0 .. inline_c %{ return dague_imin((descA.nt-1),(descA.mt-1)); %}

  : dataA(k,k)

  RW    A <- (0 == k) ? dataA(k, k) : A2 ztsmqr(k-1, k, k)
          -> (descA.mt==(k+1)) ? dataA(k,k)                      [type = UPPER_TILE]
          -> (descA.mt>=(k+2)) ? A1 ztsqrt(k, k+1)               [type = UPPER_TILE]
          -> A zgeqrt_typechange(k)
  RW    T <- dataT(k, k)                                         [type = LITTLE_T]
          -> dataT(k, k)                                         [type = LITTLE_T]
          -> (descA.nt-1 > k) ? T zunmqr(k, (k+1)..(descA.nt-1)) [type = LITTLE_T]

  /* Priority */
  ;(descA.nt-k)*(descA.nt-k)*(descA.nt-k)

BODY
{
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_zgeqrt(%d)\n"
           "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
           k, k, k, A, k, k, T);

#if !defined(DAGUE_DRY_RUN)
  void *p_elem_A = dague_private_memory_pop( p_tau );
  void *p_elem_B = dague_private_memory_pop( p_work );

  CORE_zgeqrt(tempkm, tempkn, ib,
              A /* dataA(k,k) */, ldak,
              T /* dataT(k,k) */,  descT.mb,
              p_elem_A, p_elem_B );

  dague_private_memory_push( p_tau,  p_elem_A );
  dague_private_memory_push( p_work, p_elem_B );

#endif  /* !defined(DAGUE_DRY_RUN) */

}
END


zunmqr(k,n)
  /* Execution space */
  k = 0   .. inline_c %{ return dague_imin((descA.nt-2),(descA.mt-1)); %}
  n = k+1 .. descA.nt-1

  : dataA(k,n)

  READ  A <- A zgeqrt_typechange(k)                              [type = LOWER_TILE]
  READ  T <- T zgeqrt(k)                                         [type = LITTLE_T]
  RW    C <- (0==k) ? dataA(k, n) : A2 ztsmqr(k-1, k, n)
          -> (descA.mt==(k+1)) ? dataA(k, n)
          -> (descA.mt>=(k+2)) ? A1 ztsmqr(k, k+1, n)

BODY
{
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_zunmqr(%d, %d)\n"
           "\t(PlasmaLeft, PlasmaConjTrans, tempkm, tempnn, tempkm, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, A(%d,%d)[%p], ldak, p_elem_A, descT.nb)\n",
           k, n, k, k, A, k, k, T, k, n, C);

#if !defined(DAGUE_DRY_RUN)
  void *p_elem_A = dague_private_memory_pop( p_work );

  CORE_zunmqr(PlasmaLeft, PlasmaConjTrans,
              tempkm, tempnn, tempkm, ib,
              A /* dataA(k,k) */, ldak,
              T /* dataT(k,k) */, descT.mb,
              C /* dataA(k,n) */, ldak,
              p_elem_A, descT.nb );

  dague_private_memory_push( p_work, p_elem_A );

#endif  /* !defined(DAGUE_DRY_RUN) */

}
END


ztsqrt_out_Ak(k) [profile = off]
  k = 0..( (descA.mt <= descA.nt) ? descA.mt-2 : descA.nt-1 )

  : dataA(k, k)

  RW A1 <- A1 ztsqrt(k, descA.mt-1) [type = UPPER_TILE]
        -> dataA(k, k)                 [type = UPPER_TILE]
BODY
{
    /* nothing */
}
END

ztsqrt(k,m)
  /* Execution space */
  k = 0   .. inline_c %{ return dague_imin((descA.nt-1),(descA.mt-2)); %}
  m = k+1 .. descA.mt-1

  : dataA(m, k)

  RW   A1 <- ( m == (k+1) )    ? A zgeqrt(m-1) : A1 ztsqrt(k, m-1)       [type = UPPER_TILE]
          -> (descA.mt==(m+1)) ? A1 ztsqrt_out_Ak(k) : A1 ztsqrt(k, m+1) [type = UPPER_TILE]

  RW   A2 <- (0==k) ? dataA(m, k) : A2 ztsmqr(k-1, m, k)
          -> dataA(m, k)
          -> (descA.nt-1 > k) ? V ztsmqr(k, m, (k+1)..(descA.nt-1))

  RW   T  <- dataT(m, k)                                              [type = LITTLE_T]
          -> dataT(m, k)                                              [type = LITTLE_T]
          -> (descA.nt-1 > k) ? T ztsmqr(k, m, (k+1)..(descA.nt-1))   [type = LITTLE_T]

    /* Priority */
; (descA.mt-k)*(descA.mt-k)*(descA.mt-k)

BODY
{
  int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : descA.mb;
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );

  printlog("CORE_ztsqrt(%d, %d)\n"
           "\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
           k, m, k, k, T, m, k, A1, m, k, A2);

#if !defined(DAGUE_DRY_RUN)
  void *p_elem_A = dague_private_memory_pop( p_tau );
  void *p_elem_B = dague_private_memory_pop( p_work );

  CORE_ztsqrt(tempmm, tempkn, ib,
              A1 /* dataA(k,k) */, ldak,
              A2 /* dataA(m,k) */, ldam,
              T  /* dataT(m,k) */, descT.mb,
              p_elem_A, p_elem_B );

  dague_private_memory_push( p_tau,  p_elem_A );
  dague_private_memory_push( p_work, p_elem_B );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END


ztsmqr_out_A1(k, n) [profile = off]
  k = 0   .. inline_c %{ return dague_imin((descA.nt-2),(descA.mt-2)); %}
  n = k+1 .. descA.nt-1

  : dataA(k, n)

  RW A1 <- A1 ztsmqr(k, descA.mt-1, n)
       -> dataA(k, n)
BODY
{
    /* nothing */
}
END

ztsmqr(k,m,n)
  /* Execution space */
  k = 0     .. inline_c %{ return dague_imin((descA.mt-2),(descA.nt-2)); %}
  m = (k+1) .. (descA.mt-1)
  n = (k+1) .. (descA.nt-1)

  : dataA(m, n)

  RW   A1 <- ( (k+1) == m ) ? C zunmqr(m-1, n) : A1 ztsmqr(k, m-1, n)
          -> ( m == (descA.mt-1) ) ? A1 ztsmqr_out_A1(k, n) : A1 ztsmqr(k, m+1, n)

  RW   A2 <- (0==k) ? dataA(m, n) : A2 ztsmqr(k-1, m, n)
          -> ( ((k+1) == n) & ((k+1) == m)) ? A  zgeqrt(n)            /* Diagonal */
          -> ( ((k+1) == m) & (    n > m )) ? C  zunmqr(k+1, n)       /* Next row */
          -> ( ((k+1) == n) & (    m > n )) ? A2 ztsqrt(n, m)         /* Next column */
          -> ( ((k+1) <  n) & ((1+k) < m )) ? A2 ztsmqr(k+1, m, n)    /* trailing submatrix */
  READ V  <- A2 ztsqrt(k, m)
  READ T  <- T  ztsqrt(k, m)   [type = LITTLE_T]

    /* Priority */
; (descA.mt-k)*(descA.mt-n)*(descA.mt-n)

BODY
{
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : descA.mb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );
  int ldwork = ((PlasmaLeft)==(PlasmaLeft)) ? (ib) : descT.nb;

  printlog("CORE_ztsmqr(%d, %d, %d)\n"
           "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT.mb, p_elem_A, ldwork)\n",
           k, m, n, k, n, A1, m, n, A2, m, k, V, m, k, T);

#if !defined(DAGUE_DRY_RUN)
  void *p_elem_A = dague_private_memory_pop( p_work );

  CORE_ztsmqr(PlasmaLeft, PlasmaConjTrans,
              descA.mb, tempnn, tempmm, tempnn, descA.nb, ib,
              A1 /* dataA(k,n) */, ldak,
              A2 /* dataA(m,n) */, ldam,
              V  /* dataA(m,k) */, ldam,
              T  /* dataT(m,k) */, descT.mb,
              p_elem_A, ldwork );

  dague_private_memory_push( p_work, p_elem_A );

#endif  /* !defined(DAGUE_DRY_RUN) */

}
END
