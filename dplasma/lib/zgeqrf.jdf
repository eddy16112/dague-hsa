extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "memory_pool.h"
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

#define PRECISION_z
#define BLKLDD(_desc, _k) (_desc).mb
%}

desc_A   [type = "tiled_matrix_desc_t"]
data_A   [type = "dague_ddesc_t *"]
desc_T   [type = "tiled_matrix_desc_t"]
data_T   [type = "dague_ddesc_t *" aligned=data_A]
ib       [type = "int"]
p_work   [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(desc_T.nb))"]
p_tau    [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(desc_T.nb))"]


zgeqrt(k)
  /* Execution space */
  k = 0..( (desc_A.mt < desc_A.nt) ? desc_A.mt-1 : desc_A.nt-1 )

  : data_A(k,k)

  /* A == data_A(k,k) */
  /* B == data_T(k,k) */
  /* C == data_A(k,k) */
  /* D == data_T(k,k) */
  /* F == data_A(k,k) */
  /* K == data_A(m,n1) */

  RW    A <- (0 == k) ? data_A(k, k) : K ztsmqr(k-1, k, k)
          -> (desc_A.nt>=(k+2)) ? C zunmqr(k, (k+1)..(desc_A.nt-1)) 
          -> (desc_A.mt>=(k+2)) ? F ztsqrt(k, k+1) 
          -> (desc_A.mt==(k+1)) ? data_A(k,k)
  RW    B <- data_T(k, k)                                          [type = LITTLE_T]
          -> data_T(k, k)                                          [type = LITTLE_T]
          -> (desc_A.nt-1 > k) ? D zunmqr(k, (k+1)..(desc_A.nt-1)) [type = LITTLE_T]

BODY

  int tempkm = ((k)==((desc_A.mt)-1)) ? ((desc_A.m)-(k*(desc_A.mb))) : (desc_A.mb);
  int tempkn = ((k)==((desc_A.nt)-1)) ? ((desc_A.n)-(k*(desc_A.nb))) : (desc_A.nb);
  int ldak = BLKLDD( desc_A, k );

  void *p_elem_A = dague_private_memory_pop( p_tau  );
  void *p_elem_B = dague_private_memory_pop( p_work );

#line 102 "pzgeqrf.c"
  CORE_zgeqrt(tempkm, tempkn, ib, 
	A /* data_A(k,k) */, ldak, B /* data_T(k,k) */, 
	desc_T.mb, p_elem_A, p_elem_B );

  dague_private_memory_push( p_tau , p_elem_A );
  dague_private_memory_push( p_work, p_elem_B );

  printlog("thread %d CORE_zgeqrt(%d)\n\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], desc_T.mb, p_elem_A, p_elem_B)\n",
  context->eu_id, k, k, k, A, k, k, B);

END


zunmqr(k,n)
  /* Execution space */
  k = 0..( ( desc_A.mt < desc_A.nt ) ? desc_A.mt-1 : desc_A.nt-1)
  n = k+1..desc_A.nt-1

  : data_A(k,n)

  /* A == data_A(k,k) */
  /* B == data_T(k,k) */
  /* C == data_A(k,k) */
  /* D == data_T(k,k) */
  /* E == data_A(k,n) */
  /* J == data_A(k,n1) */
  /* K == data_A(m,n1) */

  READ  C <- A zgeqrt(k) 
  READ  D <- B zgeqrt(k)                                         [type = LITTLE_T]
  RW    E <- (0==k) ? data_A(k, n) : K ztsmqr(k-1, k-1+1, n) 
          -> (desc_A.mt==(k+1)) ? data_A(k, n)
          -> (desc_A.mt>=(k+2)) ? J ztsmqr(k, k+1, n) 

BODY

  int tempkm = ((k)==((desc_A.mt)-1)) ? ((desc_A.m)-(k*(desc_A.mb))) : (desc_A.mb);
  int tempnn = ((n)==((desc_A.nt)-1)) ? ((desc_A.n)-(n*(desc_A.nb))) : (desc_A.nb);
  int ldak = BLKLDD( desc_A, k );

  void *p_elem_A = dague_private_memory_pop( p_work );

#line 115 "pzgeqrf.c"
  DRYRUN(
  CORE_zunmqr(PlasmaLeft, PlasmaConjTrans, tempkm, 
	tempnn, tempkm, ib, 
	C /* data_A(k,k) */, ldak, D /* data_T(k,k) */, 
	desc_T.mb, E /* data_A(k,n) */, ldak, 
	p_elem_A, desc_T.nb );
         );
  dague_private_memory_push( p_work, p_elem_A );

  printlog("thread %d CORE_zunmqr(%d, %d)\n\t(PlasmaLeft, PlasmaConjTrans, tempkm, tempnn, tempkm, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], desc_T.mb, A(%d,%d)[%p], ldak, p_elem_A, desc_T.nb)\n",
  context->eu_id, k, n, k, k, C, k, k, D, k, n, E);

END


ztsqrt_out_data_Ak(k)
  k = 0..( (desc_A.mt <= desc_A.nt) ? desc_A.mt-2 : desc_A.nt-1 )
    
  : data_A(k, k)

  RW F <- F ztsqrt(k, desc_A.mt-1)
       -> data_A(k, k)
BODY
/* nothing */
END

ztsqrt(k,m)
  /* Execution space */
  k = 0..( (desc_A.mt < desc_A.nt) ? desc_A.mt-1 : desc_A.nt-1 )
  m = k+1..desc_A.mt-1

  : data_A(m, k)

  /* A == data_A(k,k) */
  /* F == data_A(k,k) */
  /* G == data_A(m,k) */
  /* H == data_T(m,k) */
  /* K == data_A(m,n1) */
  /* L == data_A(m,k) */
  /* M == data_T(m,k) */

  RW    F <- ( m == (k+1) )   ? A zgeqrt(m-1) : F ztsqrt(k, m-1) 
          -> (desc_A.mt==(m+1)) ? F ztsqrt_out_data_Ak(k) : F ztsqrt(k, m+1) 
  RW    G <- (0==k) ? data_A(m, k) : K ztsmqr(k-1, m, k) 
          -> data_A(m, k)
          -> (desc_A.nt-1 > k) ? L ztsmqr(k, m, (k+1)..(desc_A.nt-1)) 
  RW    H <- data_T(m, k)
          -> data_T(m, k)
          -> (desc_A.nt-1 > k) ? M ztsmqr(k, m, (k+1)..(desc_A.nt-1))
BODY

  int tempmm = ((m)==((desc_A.mt)-1)) ? ((desc_A.m)-(m*(desc_A.mb))) : (desc_A.mb);
  int tempkn = ((k)==((desc_A.nt)-1)) ? ((desc_A.n)-(k*(desc_A.nb))) : (desc_A.nb);
  int ldak = BLKLDD( desc_A, k );
  int ldam = BLKLDD( desc_A, m );

  void *p_elem_A = dague_private_memory_pop( p_tau  );
  void *p_elem_B = dague_private_memory_pop( p_work );

#line 134 "pzgeqrf_cpp.c"
  DRYRUN(
  CORE_ztsqrt(tempmm, tempkn, ib, 
	F /* data_A(k,k) */, ldak, 
        G /* data_A(m,k) */, ldam, 
        H /* data_T(m,k) */, desc_T.mb, 
	p_elem_A, p_elem_B );
         );
  dague_private_memory_push( p_tau , p_elem_A );
  dague_private_memory_push( p_work, p_elem_B );

  printlog("thread %d CORE_ztsqrt(%d, %d)\n\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], desc_T.mb, p_elem_A, p_elem_B)\n",
  context->eu_id, k, m, k, k, F, m, k, G, m, k, H);

END


ztsmqr_out_data_A1(k, n1)
  k = 0..( (desc_A.mt < desc_A.nt) ? desc_A.mt-2 : desc_A.nt-2 )
  n1 = k+1..desc_A.nt-1

  : data_A(k, n1)

  RW J <- J ztsmqr(k, desc_A.mt-1, n1)
       -> data_A(k, n1)
BODY
/* nothing */
END

ztsmqr(k,m,n1)
  /* Execution space */
  k = 0..( (desc_A.mt < desc_A.nt) ? desc_A.mt-1 : desc_A.nt-1 )
  m = k+1..desc_A.mt-1
  n1 = k+1..desc_A.nt-1

  : data_A(m, n1)

  /* A == data_A(k,k) */
  /* E == data_A(k,n) */
  /* G == data_A(m,k) */
  /* H == data_T(m,k) */
  /* J == data_A(k,n1) */
  /* K == data_A(m,n1) */
  /* L == data_A(m,k) */
  /* M == data_T(m,k) */

  RW    J <- ( (k+1) == m ) ? E zunmqr(m-1, n1) : J ztsmqr(k, m-1, n1)
          -> ( m == (desc_A.mt-1) ) ? J ztsmqr_out_data_A1(k, n1) : J ztsmqr(k, m+1, n1) 
  RW    K <- (0==k) ? data_A(m, n1) : K ztsmqr(k-1, m, n1) 
          -> ( ((k+1) == n1) & ((k+1) == m)) ? A zgeqrt(n1)       /* Diagonal */
          -> ( ( m==(k+1)) & (n1 > m) ) ? E zunmqr(k+1, n1)       /* Next row */
          -> ( (n1==(k+1)) & (m > n1) ) ? G ztsqrt(n1, m)         /* Next column */
          -> ( (n1>(1+k)) & (m>(1+k)) ) ? K ztsmqr(k+1, m, n1)     /* trailing submatrix */
  READ  L <- G ztsqrt(k, m) 
  READ  M <- H ztsqrt(k, m) 

BODY

  int tempnn = ((n1)==((desc_A.nt)-1)) ? ((desc_A.n)-(n1*(desc_A.nb))) : (desc_A.nb);
  int tempmm = ((m)==((desc_A.mt)-1)) ? ((desc_A.m)-(m*(desc_A.mb))) : (desc_A.mb);
  int ldak = BLKLDD( desc_A, k );
  int ldam = BLKLDD( desc_A, m );
  int ldwork = ib;

  void *p_elem_A = dague_private_memory_pop( p_work );

#line 151 "pzgeqrf_cpp.c"
  DRYRUN(
  CORE_ztsmqr(PlasmaLeft, PlasmaConjTrans, desc_A.mb, 
	tempnn, tempmm, tempnn, desc_A.nb, ib, 
        J /* data_A(k,n1) */, ldak, 
        K /* data_A(m,n1) */, ldam, 
	L /* data_A(m,k) */,  ldam, 
        M /* data_T(m,k) */,  desc_T.mb, 
        p_elem_A, ldwork );
         );
  dague_private_memory_push( p_work, p_elem_A );

  printlog("thread %d CORE_ztsmqr(%d, %d, %d)\n\t(PlasmaLeft, PlasmaConjTrans, desc_A.mb, tempnn, tempmm, tempnn, desc_A.nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], desc_T.mb, p_elem_A, ldwork)\n",
  context->eu_id, k, m, n1, k, n1, J, m, n1, K, m, k, L, m, k, M);

END
