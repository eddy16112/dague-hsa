extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

uplo      [type = "PLASMA_enum"]
diag      [type = "PLASMA_enum"]
dataA     [type = "dague_ddesc_t *"]
INFO      [type = "int*"]

descA     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]


ztrsmR(k, m)
  /* Execution Space */
  k = 0     .. (descA.mt-2)
  m = (k+1) .. (descA.mt-1)

  /* Locality */
  : dataA(m, k)

  CTL   ctl  -> (k == 0) ? ctlr ztrtri(0)

  READ  A    <- A ztrsm_in_A(k)        [type = LOWER_TILE]

  RW    B    <- dataA(m, k)
                 /* Read Only tasks */
             -> (m == (k+1)) & (k < (descA.mt-2)) ? B zgemm(k+1, (m+1)..(descA.mt-1), k)
             -> (k > 0) ? A zgemm(k, m, 0..(k-1))

                 /* RW tasks */
             -> (m == (k+1)) ? B ztrsmL(k+1, k)
             -> (m >  (k+1)) ? C zgemm(k+1, m, k)

BODY
{
    int tempmm = (m == (descA.mt-1)) ? (descA.m - m*descA.mb) : descA.mb;
    int tempkn = (k == (descA.nt-1)) ? (descA.n - k*descA.nb) : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_ztrsm(%d, %d)\n"
             "\t(PlasmaRight, uplo, PlasmaNoTrans, diag, tempmm, tempkn, -1, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
             k, m, k, k, A, m, k, B);

#if !defined(DAGUE_DRY_RUN)
    CORE_ztrsm(PlasmaRight, uplo, PlasmaNoTrans, diag,
               tempmm, tempkn,
               -1.0, A /* dataA(k,k) */, ldak,
                     B /* dataA(m,k) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

zgemm(k, m, n)
  /* Execution Space */
  k = 1     .. (descA.mt-2)
  m = (k+1) .. (descA.mt-1)
  n = 0     .. (k-1)

  /* Locality */
  : dataA(m, n)

    /* Release ztrsmL using A as C in next step */
  CTL   ctlA -> (m == (k+1)) ? ctlA ztrsmL(k+1, k)
    /* Release GEMM using A as C in next step */
             -> (m >  (k+1)) ? ctlC zgemm(k+1, m, k)

    /* Release ztrsmL that will modify the local B as C */
  CTL   ctlB -> ctlB ztrsmL(k, n)

    /* Wait until C is not used as A anymore */
  CTL   ctlC <- (n == (k-1)) ? ctlA zgemm(k-1, m, 0 .. (n-1))

  READ  A    <- B ztrsmR(k, m)

  READ  B    <- (k == (n+1)) ? B ztrsmR(k-1, k)
             <- (k >  (n+1)) ? C zgemm(k-1, k, n)

  RW    C    <- (k == (n+1)) ? B ztrsmR(k-1, m)
             <- (k >  (n+1)) ? C zgemm(k-1, m, n)

             -> (m == (k+1)) ? B ztrsmL(k+1, n)
             -> (m >  (k+1)) ? C zgemm(k+1, m, n)
             -> (m == (k+1)) &  (k < (descA.mt-2)) ? B zgemm(k+1, (m+1)..(descA.mt-1), n)

BODY
{
    int tempmm = (m == (descA.mt-1)) ? (descA.m - m*descA.mb) : descA.mb;
    int tempnn = (n == (descA.nt-1)) ? (descA.n - n*descA.nb) : descA.nb;
    int tempkn = (k == (descA.nt-1)) ? (descA.n - k*descA.nb) : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(PlasmaNoTrans, PlasmaNoTrans, tempmm, tempnn, tempkn, 1.000000, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
             k, m, n, m, k, A, k, n, B, m, n, C);

#if !defined(DAGUE_DRY_RUN)
    CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
               tempmm, tempnn, tempkn,
               1.0, A /* dataA(m,k) */, ldam,
                    B /* dataA(k,n) */, ldak,
               1.0, C /* dataA(m,n) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

ztrsmL(k, n)
  /* Execution Space */
  k = 1 .. (descA.nt-1)
  n = 0 .. (k-1)

  /* Locality */
  : dataA(k, n)

    /* Wait until no more gemms using local B as their A */
  CTL   ctlA <- ((n == (k-1)) && (k > 1)) ? ctlA zgemm( k-1, k, 0 .. (k-2) )

    /* Wait until no more gemms using local B as their B */
  CTL   ctlB <- (k < (descA.mt-1)) ? ctlB zgemm( k, (k+1) .. (descA.mt-1), n )

    /* Release the trtri on A(k,k) */
  CTL   ctl  -> ctll ztrtri(k)

  READ  A    <- A ztrsm_in_A(k)        [type = LOWER_TILE]
  RW    B    <- (k == (n+1)) ? B ztrsmR(k-1, k)
             <- (k >  (n+1)) ? C zgemm(k-1, k, n)
             -> dataA(k, n)

BODY
{
    int tempkn = (k == (descA.nt-1)) ? (descA.n - k*descA.nb) : descA.nb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_ztrsm(%d, %d)\n"
             "\t(PlasmaLeft, uplo, PlasmaNoTrans, diag, tempkn, descA.mb, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
             k, n, k, k, A, k, n, B);

#if !defined(DAGUE_DRY_RUN)
    CORE_ztrsm(PlasmaLeft, uplo, PlasmaNoTrans, diag,
               tempkn, descA.mb,
               1.0, A /* dataA(k,k) */, ldak,
                    B /* dataA(k,n) */, ldak );
#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

ztrsm_in_A(k) [profile = off]
  /* Execution Space */
  k = 0 .. (descA.nt-1)

  /* Locality */
  : dataA(k,k)

  READ  A    <- dataA(k,k)                                          [type = LOWER_TILE]
             -> (k < descA.mt-1) ? A ztrsmR(k, (k+1)..(descA.mt-1)) [type = LOWER_TILE]
             -> (k > 0)          ? A ztrsmL(k, 0..(k-1))            [type = LOWER_TILE]

BODY
{
    /* nothing */
}
END

ztrtri(k)
  /* Execution Space */
  k = 0 .. (descA.nt-1)

  /* Locality */
  : dataA(k, k)

  CTL   ctlr  <- ((k == 0)  && (descA.mt > 1)) ? ctl ztrsmR(0, 1 .. descA.mt-1)
  CTL   ctll  <-  (k > 0)                      ? ctl ztrsmL(k, 0 .. k-1)

  RW    A    <- dataA(k,k)     [type = LOWER_TILE]
             -> dataA(k,k)     [type = LOWER_TILE]

BODY
{
    int tempkn = (k == (descA.nt-1)) ? (descA.n - k*descA.nb) : descA.nb;
    int ldak = BLKLDD( descA, k );
    int info = 0;

    printlog("CORE_ztrtri(%d)\n"
             "\t(uplo, diag, tempkn, A(%d,%d)[%p], ldan, sequence, request, descA.nb*k)\n",
             k, k, k, A);

#if !defined(DAGUE_DRY_RUN)
    CORE_ztrtri(uplo, diag, tempkn,
                A /* dataA(k,k) */, ldak, &info );

    if ( info != PLASMA_SUCCESS) {
        *INFO = k*descA.mb + info; /* Should return if enter here */
        fprintf(stderr, "ztrtri(%d) failed => %d\n", k, *INFO );
    }
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END
