extern "C" %{
/*
 *  Copyright (c) 2010-2013
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#define pi (3.1415926535897932384626433832795028841971693992)

#include <math.h>
#include <core_blas.h>
#include <core_blas.h>

#include "dague.h"
#include "dplasma.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"

static inline int dplasma_imin(int a, int b);

%}

/*
 * Globals
 */
seed   [type = "unsigned long long int" ]
dataA  [type = "dague_ddesc_t *"]
descA  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]

/**************************************************
 *                       READ_X                   *
 **************************************************/
GEN_RANDOM(m)  [profile = off]

m = 0 .. descA.mt-1

: dataA(m, m)

    WRITE R -> R1 PLRNT(m, 0..descA.nt-1)  [type = VECTOR]
            -> R2 PLRNT(0..descA.mt-1, m)  [type = VECTOR]
BODY
{
    CORE_dplrnt( descA.mb, 1, R, descA.mb, descA.m, m * descA.mb + 1, 0, seed );
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
PLRNT(m, n)

// Execution space
m = 0 .. descA.mt-1
n = 0 .. descA.nt-1

// Parallel partitioning
: dataA(m, n)

// Parameters
READ R1 <- R GEN_RANDOM(m)                                                [type = VECTOR]
READ R2 <- R GEN_RANDOM(n)                                                [type = VECTOR]

RW   A <- dataA(m, n)
       -> dataA(m, n)

BODY
{
    dague_complex64_t *lA  = (dague_complex64_t*)A;
    dague_complex64_t *lR1 = (dague_complex64_t*)R1;
    dague_complex64_t *lR2 = (dague_complex64_t*)R2;
    int tempmm = (m == descA.mt-1) ? descA.m - m * descA.mb : descA.mb;
    int tempnn = (n == descA.nt-1) ? descA.n - n * descA.nb : descA.nb;
    int ldam = BLKLDD(descA, m);

#if !defined(DAGUE_DRY_RUN)
    {
        int i, j;

        for (j=0; j<tempnn; j++) {
            for (i=0; i<tempmm; i++,lA++) {
                *lA = cabs( lR1[i] - lR2[j] );
            }
            lA += (ldam - tempmm);
        }
    }
#endif
}
END

extern "C" %{

%}
