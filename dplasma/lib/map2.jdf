extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 */
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

/*
 * Globals
 */
uplo     [type = PLASMA_enum]
dataA    [type = "dague_ddesc_t *"]
dataB    [type = "dague_ddesc_t *"]
operator [type = "tiled_matrix_binary_op_t" ]
op_args  [type = "void *" ]

descA        [type="tiled_matrix_desc_t" hidden=on default="*((tiled_matrix_desc_t*)dataA)" ]
plasma_upper [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower [type="PLASMA_enum" hidden=on default=PlasmaLower ]

map_l_in_Amn(m, n)   [profile = off]
  m = 1 .. ((uplo == plasma_upper) ? 0 : descA.mt-1)
  n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )

  : dataA(m, n)

  RW A <- dataA(m, n)
       -> A MAP_L(m, n)

BODY
{
    /* nothing */
}
END

MAP_L(m, n)  [profile = off]
  // Execution space
  m = 1 .. ((uplo == plasma_upper) ? 0 : descA.mt-1)
  n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )

  // Parallel partitioning
  : dataB(m, n)

  // Parameters
  READ  A <- A map_l_in_Amn(m, n)
  RW    B <- dataB(m, n)
          -> dataB(m, n)

BODY
{
    DRYRUN(
        operator( context, A, B, op_args, PlasmaUpperLower, m, n );
           );

    printlog("thread %d VP %d map_l( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, m, n );
}
END

map_u_in_Amn(m, n)  [profile = off]
  m = 0   .. descA.mt-1
  n = m+1 .. ((uplo == plasma_lower) ? 0 : descA.nt-1)

  : dataA(m, n)

  RW A <- dataA(m, n)
       -> A MAP_U(m, n)

BODY
{
    /* nothing */
}
END

MAP_U(m, n)  [profile = off]
  // Execution space
  m = 0   .. descA.mt-1
  n = m+1 .. ((uplo == plasma_lower) ? 0 : descA.nt-1)

  // Parallel partitioning
  : dataB(m, n)

  // Parameters
  READ  A <- A map_u_in_Amn(m, n)
  RW    B <- dataB(m, n)
          -> dataB(m, n)

BODY
{
    DRYRUN(
        operator( context, A, B, op_args, PlasmaUpperLower, m, n );
           );

    printlog("thread %d VP %d map_u( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, m, n );
}
END

map_diag_in_Akk(k)  [profile = off]
  k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )

  : dataA(k, k)

  RW A <- dataA(k, k)
       -> A MAP_DIAG(k)

BODY
{
    /* nothing */
}
END

MAP_DIAG(k) [profile = off]
  // Execution space
  k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )

  // Parallel partitioning
  : dataB(k, k)

  // Parameters
  READ  A <- A map_diag_in_Akk(k)
  RW    B <- dataB(k, k)
          -> dataB(k, k)

BODY
{
    DRYRUN(
        operator( context, A, B, op_args, uplo, k, k );
           );

    printlog("thread %d VP %d map_diag( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, k, k );
}
END
