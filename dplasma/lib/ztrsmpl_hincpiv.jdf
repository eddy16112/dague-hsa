extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include "dague.h"
#include <math.h>
#include <plasma.h>
#include <core_blas.h>

#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma_qr_pivgen.h"

//#define PRIO_YVES1

#if defined(PRIO_YVES1)
#define GETPRIO_PANEL( __m, __n )      descA.mt * descA.nt - ((descA.nt - (__n) - 1) * descA.mt + (__m) + 1)
#define GETPRIO_UPDTE( __m, __n, __k ) descA.mt * descA.nt - ((descA.nt - (__n) - 1) * descA.mt + (__m) + 1)
#elif defined(PRIO_YVES2)
#define GETPRIO_PANEL( __m, __n )      descA.mt * descA.nt - ((__m) * descA.nt + descA.nt - (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) descA.mt * descA.nt - ((__m) * descA.nt + descA.nt - (__n))
#elif defined(PRIO_MATHIEU1)
#define GETPRIO_PANEL( __m, __n )      (descA.mt + (__n) - (__m) - 1) * descA.nt + (__n)
#define GETPRIO_UPDTE( __m, __n, __k ) (descA.mt + (__n) - (__m) - 1) * descA.nt + (__n)
#elif defined(PRIO_MATHIEU2)
#define GETPRIO_PANEL( __m, __n )      ((dague_imax(descA.mt, descA.nt) - dague_imax( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) ((dague_imax(descA.mt, descA.nt) - dague_imax( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#elif defined(PRIO_MATYVES)
#define FORMULE( __x ) ( ( -1. + sqrt( 1. + 4.* (__x) * (__x)) ) * 0.5 )
#define GETPRIO_PANEL( __m, __k )      (int)( 22. * (__k) + 6. * ( FORMULE( descA.mt ) - FORMULE( (__m) - (__k) + 1. ) ) )
#define GETPRIO_UPDTE( __m, __n, __k ) (int)( (__   printlog("thread %d   CORE_zgessm(%d, %d, %d)\n"
            "\t(tempkm, tempnn, tempkm, ib, IPIV(%d,%d)[%p], \n"
            "\tA(%d,%d)[%p], ldak, B(%d,%d)[%p], ldak)\n",
            context->eu_id, k, i, n, m, k, P, m, k, A, m, n, C);m) < (__n) ? GETPRIO_PANEL( (__n), (__n) ) - 22. * ( (__m) - (__k) ) - 6. * ( (__n) - (__m) ) \
                                              :               GETPRIO_PANEL( (__m), (__n) ) - 22. * ( (__n) - (__k) ) )
#else
  /*#warning running without priority*/
#define GETPRIO_PANEL( __m, __n )      0
#define GETPRIO_UPDTE( __m, __n, __k ) 0
#endif

%}

descA   [type = "tiled_matrix_desc_t"]
A       [type = "dague_ddesc_t *"]
descB   [type = "tiled_matrix_desc_t"]
B       [type = "dague_ddesc_t *"]
IPIV    [type = "dague_ddesc_t *" aligned=A]
descLT  [type = "tiled_matrix_desc_t"]
LT      [type = "dague_ddesc_t *" aligned=A]
pivfct  [type = "qr_piv_t*"]
ib      [type = int]
p_work  [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descLT.nb))"]
p_tau   [type = "dague_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(descLT.nb))"]
INFO    [type = "int*"]

param_p [type = int default="pivfct->p"      hidden=on]
param_a [type = int default="pivfct->a"      hidden=on]
param_d [type = int default="pivfct->domino" hidden=on]

zgessm_in(k, i) [profile = off]
  /* Execution space */
  k = 0..( ( descA.mt < descA.nt ) ? descA.mt-1 : descA.nt-1)
  i = 0..inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}
  m = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}

  : A(m,k)

  READ A <- A(m,k)                                                    [type = LOWER_TILE]
         -> A zgessm(k, i, 0..descB.nt-1)                             [type = LOWER_TILE]
  READ P <- IPIV(m,k)                                                 [type = PIVOT]
         -> P zgessm(k, i, 0..descB.nt-1)                             [type = PIVOT]

BODY
    /* Nothing */
END


zgessm(k, i, n)
  /* Execution space */
  k = 0..( ( descA.mt < descA.nt ) ? descA.mt-1 : descA.nt-1)
  i = 0..inline_c %{ return dplasma_qr_getnbgeqrf( pivfct, k, descA.mt ) - 1; %}
  n = 0..descB.nt-1
  m = inline_c %{ return dplasma_qr_getm( pivfct, k, i); %}
  nextm = inline_c %{ return dplasma_qr_nextpiv( pivfct, m, k, descA.mt); %}

  SIMCOST 6

  : B(m, n)

  /* A == A(m,k) */
  /* C == B(m,n) */

  READ  A <- A zgessm_in(k,i)                                                    [type = LOWER_TILE]
  READ  P <- P zgessm_in(k,i)                                                    [type = PIVOT]
  RW    C <- ( 0 == k ) ? B(m, n)
          <- ( k >  0 ) ? C zttmqr(k-1, m, n)
          -> ( k == descA.mt-1 ) ? B(m, n)
          -> ( (k < descA.mt-1) & (nextm != descA.mt) ) ? V zttmqr(k, nextm, n)
          -> ( (k < descA.mt-1) & (nextm == descA.mt) ) ? C zttmqr(k, m,     n)

    ; inline_c %{ return GETPRIO_UPDTE(m, n, k); %}

BODY

    int tempknA = (k == (descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int tempmmB = (m == (descB.mt-1)) ? (descB.m - m * descB.mb) : descB.mb;
    int tempnnB = (n == (descB.nt-1)) ? (descB.n - n * descB.nb) : descB.nb;
    int tempk   = dague_imin( tempknA, tempmmB );
    int ldam    = BLKLDD( descA, m );
    int ldbm    = BLKLDD( descB, m );

    printlog("\nthread %d   zgessm( k=%d, i=%d, n=%d, m=%d, nextm=%d)\n"
             "\t( m=%d, n=%d, k=%d, ib, IPIV(%d,%d)[%p], \n"
             "\t  A(%d,%d)[%p], ldam = %d, A(%d,%d)[%p], ldam = %d)\n",
             context->eu_id, k, i, n, m, nextm,
             tempmmB, tempnnB, tempk, m, k, P, m, k, A, ldam, m, n, C, ldbm);

    DRYRUN(
           CORE_zgessm(tempmmB, tempnnB, tempk, ib,
                       P /* IPIV(m,k) */,
                       A /* A(m,k)    */, ldam,
                       C /* B(m,n)    */, ldbm );
           );

END


zttmqr_out(k, n) [profile = off]
  k = 0..( (descA.mt < descA.nt) ? descA.mt-2 : descA.nt-2 )
  n = 0..descB.nt-1
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, k, k, k); %}

  : B(k, n)

  RW A <- V zttmqr( k, prevp, n )
       -> B(k, n)
BODY
    /* Nothing */
END



zttmqr_in(k, m) [profile = off]
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  type  = inline_c %{ return dplasma_qr_gettype( pivfct, k,   m ); %}

  : A(m,k)

  READ A <- A(m,k)
         -> H zttmqr(k, m, 0..descB.nt-1)
  READ P <- IPIV(m,k)                                                  [type = PIVOT]
         -> (type == 0) ? P zttmqr(k, m, 0..descB.nt-1)                [type = PIVOT]
  READ L <- LT(m,k)                                                    [type = SMALL_L]
         -> L zttmqr(k,m,0..descB.nt-1)                                [type = SMALL_L]

BODY
    /* Nothing */
END



zttmqr(k, m, n)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  n = 0..descB.nt-1
  p =     inline_c %{ return dplasma_qr_currpiv(pivfct, m, k); %}
  nextp = inline_c %{ return dplasma_qr_nextpiv(pivfct, p, k, m); %}
  prevp = inline_c %{ return dplasma_qr_prevpiv(pivfct, p, k, m); %}
  prevm = inline_c %{ return dplasma_qr_prevpiv(pivfct, m, k, m); %}
  type  = inline_c %{ return dplasma_qr_gettype( pivfct, k,   m ); %}
  type1 = inline_c %{ return dplasma_qr_gettype( pivfct, k+1, m ); %}
  ip    = inline_c %{ return dplasma_qr_geti(    pivfct, k,   p ); %}
  im    = inline_c %{ return dplasma_qr_geti(    pivfct, k,   m ); %}
  im1   = inline_c %{ return dplasma_qr_geti(    pivfct, k+1, m ); %}

  SIMCOST inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? 12 : 6; %}

  : B(m, n)

  RW   V  <- (   prevp == descA.mt ) ? C  zgessm( k, ip, n ) : V zttmqr(k, prevp, n )
          -> (   nextp != descA.mt ) ? V zttmqr( k, nextp, n)
          -> ( ( nextp == descA.mt ) && ( p == k ) ) ? A zttmqr_out(p, n)
          -> ( ( nextp == descA.mt ) && ( p != k ) ) ? C zttmqr( k, p, n )
  RW   C  <- ( (type == 0) && (k     == 0        ) ) ? B(m, n)
          <- ( (type == 0) && (k     != 0        ) ) ? C zttmqr(k-1, m, n )
          <- ( (type != 0) && (prevm == descA.mt ) ) ? C  zgessm(k, im, n)
          <- ( (type != 0) && (prevm != descA.mt ) ) ? V zttmqr(k, prevm, n )
          -> (type1 != 0) ? C  zgessm( k+1, im1, n )
          -> (type1 == 0) ? C zttmqr( k+1, m, n )

  READ  H <- A zttmqr_in(k,m)
  READ  L <- L zttmqr_in(k,m)                    [type = SMALL_L]
  READ  P <- (type == 0 ) ? P zttmqr_in(k,m)     [type = PIVOT]
          <- (type != 0 ) ? B(m,n)        /*never used*/

    ; inline_c %{ return type == DPLASMA_QR_KILLED_BY_TS ? GETPRIO_UPDTE(p, n, k) : GETPRIO_UPDTE(m, n, k); %}

BODY
    int tempnn = (n == (descB.nt-1)) ? (descB.n - n * descB.nb) : descB.nb;
    int tempmm = (m == (descB.mt-1)) ? (descB.m - m * descB.mb) : descB.mb;
    int tempkn = (k == (descA.nt-1)) ? (descA.n - k * descA.nb) : descA.nb;
    int ldbp = BLKLDD( descB, p );
    int ldbm = BLKLDD( descB, m );
    int ldam = BLKLDD( descA, m );

    printlog("\nthread %d zttmqr( k=%d, m=%d, n=%d, p=%d, nextp=%d, prevp=%d, prevm=%d, type=%d, type1=%d, ip=%d, im=%d, im1=%d)\n"
             "\t(M1=%d, N1=%d, M2=%d, N2=%d, K=%d, ib=%d, \n"
             "\t B(%d,%d)[%p], %d, B(%d,%d)[%p], %d,\n"
             "\t LT(%d,%d)[%p], descLT.mb=%d, A(%d,%d)[%p], %d)\n",
             context->eu_id, k, m, n, p, nextp, prevp, prevm, type, type1, ip, im, im1,
             descB.mb, tempnn, tempmm, tempnn, tempkn, ib,
             p, n, V, ldbp, m, n, C, ldbm,
             m, k, L, descLT.mb, m, k, H, ldam);

    DRYRUN(

        if ( type == DPLASMA_QR_KILLED_BY_TS ) {
            CORE_zssssm(
                descB.mb, tempnn, tempmm, tempnn, tempkn, ib,
                V /* B(p, n)  */, ldbp,
                C /* B(m, n)  */, ldbm,
                L /* LT(m, k) */, descLT.mb,
                H /* A(m, k)  */, ldam,
                P /* IPIV(m,k)*/ );
        } else {
            void *p_elem_A = dague_private_memory_pop( p_work );

            CORE_zttmqr(
                PlasmaLeft, PlasmaConjTrans,
                descB.mb, tempnn, tempmm, tempnn, tempkn, ib,
                V /* B(p, n)  */, ldbp,
                C /* B(m, n)  */, ldbm,
                H /* A(m, k)  */, ldam,
                L /* LT(m, k) */, descLT.mb,
                p_elem_A, ib );

            dague_private_memory_push( p_work, p_elem_A );
        }

         );

END
