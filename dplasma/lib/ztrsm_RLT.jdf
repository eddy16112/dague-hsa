extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
  
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "dplasmajdf.h"

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
Bmb  [int]
Bnb  [int]
Bmt  [int]
Bnt  [int]
Bm   [int]
Bn   [int]
     
Amb  [int]
Anb  [int]
Amt  [int]
Ant  [int]
Am   [int]
An   [int]

trans[int]
diag [int]

alpha[Dague_Complex64_t]

/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM_IN(k)
k = 0..Bnt-1

: A(k, k)

READ A <- A(k, k)
       -> A TRSM(0..Bmt-1, k)

BODY
 /* Nothing */
END

TRSM(m, k)

// Execution space
k = 0..Bnt-1
m = 0..Bmt-1

// Parallel partitioning
: B(m,k)

// Parameters
READ  A <- A TRSM_IN(k)
RW    B <- (k == 0) ? B(m, k) : C GEMM(k-1, m, k)
        -> B GEMM(k, m, k+1..Bnt-1)
        -> B(m, k)

BODY
      int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
      int tempkn = k == Bnt-1 ? Bn - k * Bnb : Bnb;
      DRYRUN(
	   CORE_ztrsm(
			PlasmaRight, PlasmaLower, trans, diag,
			tempmm, tempkn,
			alpha, A /*A(k, k)*/, Amb,
                               B /*B(m, k)*/, Bmb)
	   );

      OUTPUT( ("thread %d CORE_ztrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, 
               plasma_const( PlasmaRight ), plasma_const( PlasmaLower ), plasma_const( trans ), plasma_const( diag ),
               tempmm, tempkn,
	       alpha, k, k, A /*A(k, k)*/, Amb,
                      m, k, B /*B(m. k)*/, Bmb)
	      );
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM_IN(n, k)
k = 0..Bnt-1
n = k+1..Bnt-1

: A(n, k)

READ A <- A(n, k)
       -> A GEMM(k, 0..Bmt-1, n)

BODY
 /* Nothing */
END

GEMM(k, m, n)

// Execution space
k = 0..Bnt-1
m = 0..Bmt-1
n = k+1..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A GEMM_IN(n, k)
READ  B <- B TRSM(m, k)
RW    C <- (k == 0)   ? B(m, n)      : C GEMM(k-1, m, n)
        -> (k+1 == n) ? B TRSM(m, n) : C GEMM(k+1, m, n)

BODY

      Dague_Complex64_t minvalpha  = (Dague_Complex64_t)-1.0 / alpha;
      int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
      int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
      DRYRUN(
	   CORE_zgemm(
                        PlasmaNoTrans, trans,
                        tempmm, tempnn, Bmb,
			minvalpha,   B /* B(m, k)*/ , Bmb,
			             A /* A(n, k)*/ , Amb,
			(Dague_Complex64_t)1.0, C /* B(m, n)*/ , Bmb)
	   );

      OUTPUT( ("thread %d CORE_zgemm( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, plasma_const( PlasmaNoTrans ), plasma_const( trans ), 
               tempmm, tempnn, Bmb,
	       minvalpha,   m, k, B, Bmb,
                            n, k, A, Amb,
	       (Dague_Complex64_t)1.0, m, n, C, Bmb)
	      );
END
