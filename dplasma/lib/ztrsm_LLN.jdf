extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
  
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "dplasmajdf.h"

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
Bmb  [int]
Bnb  [int]
Bmt  [int]
Bnt  [int]
Bm   [int]
Bn   [int]
     
Amb  [int]
Anb  [int]
Amt  [int]
Ant  [int]
Am   [int]
An   [int]

trans[int]
diag [int]

alpha[Dague_Complex64_t]

/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM_IN(k)
k = 0..Bmt-1

: A(k, k)

RW A <- A(k, k)
     -> A TRSM(k, 0..Bnt-1)

BODY
 /* Nothing */
END

TRSM(k, n)

// Execution space
k = 0..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(k,n)

// Parameters
READ  A <- A TRSM_IN(k)
RW    B <- (k == 0) ? B(k, n) : C GEMM(k-1, k, n)
        -> B GEMM(k, k+1..Bmt-1, n)
        -> B(k, n)

BODY
      Dague_Complex64_t lalpha = k == 0 ? alpha : (Dague_Complex64_t)1.0;    
      int tempkm = k == Bmt-1 ? Bm - k * Bmb : Bmb;
      int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
      DRYRUN(
      	   CORE_ztrsm(
	   		PlasmaLeft, PlasmaLower, trans, diag,
			tempkm, tempnn,
			lalpha, A /*A(k, k)*/, Amb,
                                B /*B(k, n)*/, Bmb)
	   );

      OUTPUT( ("thread %d CORE_ztrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, 
               plasma_const( PlasmaLeft ), plasma_const( PlasmaLower ), plasma_const( trans ), plasma_const( diag ),
               tempkm, tempnn,
	       lalpha, k, k, A /*A(k, k)*/, Amb,
	               k, n, B /*B(k, n)*/, Bmb)
	      );
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM_IN(m, k)
k = 0..Bmt-1
m = k+1..Bmt-1

:A(m, k)

RW A <- A(m, k)
     -> A GEMM(k, m, 0..Bnt-1)

BODY
  /* Nothing */
END

// Name
GEMM(k, m, n)

// Execution space
k = 0..Bmt-1
m = k+1..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A GEMM_IN(m, k)
READ  B <- B TRSM(k, n)
RW    C <- (k == 0) ? B(m, n) : C GEMM(k-1, m, n)
        -> (k+1 == m) ? B TRSM(m, n) : C GEMM(k+1, m, n)

BODY
      Dague_Complex64_t lalpha = k == 0 ? alpha : (Dague_Complex64_t)1.0;    
      int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
      int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
      DRYRUN(
	   CORE_zgemm(
			PlasmaNoTrans, PlasmaNoTrans,
                        tempmm, tempnn, Bmb,
			(Dague_Complex64_t)-1.0, A /* A(m, k)*/ , Amb,
                                                 B /* B(k, n)*/ , Bmb,
			lalpha,                  C /* B(m, n)*/ , Bmb)
	   );

      OUTPUT( ("thread %d CORE_zgemm( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, plasma_const( trans ), plasma_const( PlasmaNoTrans ), 
               tempmm, tempnn, Bmb,
	       (Dague_Complex64_t)-1.0, m, k, A, Amb,
                             k, n, B, Bmb,
	       lalpha,       m, n, C, Bmb)
	      );
END
