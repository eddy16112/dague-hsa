extern "C" %{
/*
 * Copyright (c) 2011-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> c d s
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

/*
 * Globals
 */
seed   [type = "unsigned long long int" ]
dataA  [type = "dague_ddesc_t *"]
descA  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]

/**************************************************
 *                       READ_X                   *
 **************************************************/
GEN_RANDOM(m) [profile = off]

m = 0 .. descA.mt-1

: dataA(m, 0)

    WRITE R -> R PLRNT(m, 0..descA.nt-1, m)  [type = VECTOR]

BODY
{
    CORE_zpltmg_toeppd1( descA.m, m * descA.mb + 1, descA.mb, R, seed );
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
PLRNT(m, n, k) [profile = off]

// Execution space
m = 0 .. descA.mt-1
n = 0 .. descA.nt-1
k = 0 .. descA.mt-1

// Parallel partitioning
: dataA(m, n)

// Parameters
RW   R <- ( m == k )                       ? R GEN_RANDOM(m)                          [type = VECTOR]
       <- ( m != k )                       ? R PLRNT(          (m+1)%descA.mt, n, k)  [type = VECTOR]
       -> ( (descA.mt+m-1)%descA.mt != k ) ? R PLRNT( (descA.mt+m-1)%descA.mt, n, k)  [type = VECTOR]

RW   A <- ( m == k )                ? dataA(m, n)
       <- ( m != k )                ? A PLRNT( m, n, (descA.mt+k-1)%descA.mt )
       -> ( ((k+1)%descA.mt) == m ) ? dataA(m, n)
       -> ( ((k+1)%descA.mt) != m ) ? A PLRNT( m, n,          (k+1)%descA.mt )

BODY
{
    int tempmm = (m == descA.mt-1) ? descA.m - m * descA.mb : descA.mb;
    int tempnn = (n == descA.nt-1) ? descA.n - n * descA.nb : descA.nb;
    int tempkm = (k == descA.mt-1) ? descA.m - k * descA.nb : descA.mb;
    int ldam = BLKLDD(descA, m);

#if !defined(DAGUE_DRY_RUN)
    /* This is the first one */
    if (m == k) {
        CORE_zlaset( PlasmaUpperLower, tempmm, tempnn, 0., 0., A, ldam );
    }

    CORE_zpltmg_toeppd2(
        tempmm, tempnn, tempkm,
        m * descA.mb, n*descA.nb, R,
        A, ldam );
#endif
}
END
