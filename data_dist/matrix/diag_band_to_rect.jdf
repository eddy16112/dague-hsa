extern "C" %{
/*
 * Copyright (c) 2011      The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */

#include "dague.h"
#include "data_dist/matrix/matrix.h"
#include "data_dist/matrix/two_dim_rectangle_cyclic/two_dim_rectangle_cyclic.h"
#include "data_dist/matrix/sym_two_dim_rectangle_cyclic/sym_two_dim_rectangle_cyclic.h"

/***********************************************************
 * Convert a tiled 2D cyclic symetric band diagonal matrix *
 * into a 1D cyclic rectangle                              *
 ***********************************************************/

%}

A   [type = "sym_two_dim_block_cyclic_t*"]
B   [type = "two_dim_block_cyclic_t*"]
MT  [type = int]
NT  [type = int]
MB  [type = int]
NB  [type = int]
TY  [type = size_t]

convert_diag(k)
    k = 0 .. NT
    : B(0,k)

RO  D   <- (k < NT)     ? A read_diag(k)    : B(0,k)
RO  SD  <- (k < NT-1)   ? A read_subdiag(k) : B(0,k)
RW  B   <- B(0,k)
        -> B(0,k)

BODY
    int j;
    char* b  = B;
    char* d  = D;
    char* sd = SD;
    int  BNB = NB+2;
    int  BMB = MB+1;

    //fprintf(stderr, "convert_diag( %d )\n", k);

    assert(MB == NB);
    if(k == NT)
    {
        /*
        for(j = 0; j < NB+2; j++) for(i = 0; i < MB+1; i++)
            B[j*(NB+2)+i] = 0e0;
        */
        memset(b, 0, TY* BNB*BMB);
    } 
    else
    {
        for(j = 0; j < NB; j++)
        {
            /*
            for(i = 0; i < MB-j; i++)
                B[j*BNB+i] = D[j*NB+j+i];
            */
            memcpy(b+TY* (j*BNB), d+TY* (j*BNB+j), TY* (MB-j));
            if(k == NT-1)
                /*
                for(i = MB-j; i < MB+1; i++)
                    B[j*BNB+i] = 0e0;
                */
                memset(b+TY* (j*BNB+MB-j), 0, TY* (j+1));
            else
                /*
                for(i = MB-j; i <= MB+1; i++)
                    B[j*BNB+i] = SD[j*NB+i-(MB-j)];
                */
                memcpy(b+TY* (j*BNB+MB-j), sd+TY* (j*NB), TY* (j+1));
        }
    }
END

read_diag(k)
    k = 0 .. NT-1
    : A(k,k)

RO  A <- A(k,k)
      -> D convert_diag(k)

BODY
    //fprintf(stderr, "read_diag( %d )\n", k);
    /*nothing*/
END

read_subdiag(k)
    k = 0 .. NT-2
    : A(k+1,k)

RO  A <- A(k+1,k)
      -> SD convert_diag(k)

BODY
    //fprintf(stderr, "read_subdiag( %d )\n", k);
    /*nothing*/
END

